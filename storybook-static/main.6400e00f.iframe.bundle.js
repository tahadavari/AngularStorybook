(self.webpackChunktaskbox=self.webpackChunktaskbox||[]).push([[179],{"./.storybook/preview.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{default:()=>_storybook_preview});var angular=__webpack_require__("./node_modules/@storybook/addon-docs/angular/index.js");const documentation_namespaceObject=JSON.parse('{"pipes":[],"interfaces":[{"name":"Task","id":"interface-Task-8ff60bd7d3ecbb5aa8efccc7fb6337f67dfc955c373dbddc9acacb8b849212756c7f7013057b1fbb90340c0e854017c622fc799af461c332cf1ce3be183dff9e","file":"src/app/models/task.model.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"export interface Task {\\r\\n    id?: string;\\r\\n    title?: string;\\r\\n    state?: string;\\r\\n  }","properties":[{"name":"id","deprecated":false,"deprecationMessage":"","type":"string","optional":true,"description":"","line":3},{"name":"state","deprecated":false,"deprecationMessage":"","type":"string","optional":true,"description":"","line":5},{"name":"title","deprecated":false,"deprecationMessage":"","type":"string","optional":true,"description":"","line":4}],"indexSignatures":[],"kind":165,"methods":[]},{"name":"TaskStateModel","id":"interface-TaskStateModel-a73d10c2547923b5d51d0b3b7612c6f3d8b95a8f827c9b295a8c310029233c04a951b3c99fb31146c9a5ba39408f7a1063837ee2ec685f3d45f5f998c0fbdcd1","file":"src/app/state/task.state.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { Injectable } from \'@angular/core\';\\r\\nimport { State, Selector, Action, StateContext } from \'@ngxs/store\';\\r\\nimport { patch, updateItem } from \'@ngxs/store/operators\';\\r\\nimport { Task } from \'../models/task.model\';\\r\\n\\r\\n// Defines the actions available to the app\\r\\nexport const actions = {\\r\\n  ARCHIVE_TASK: \'ARCHIVE_TASK\',\\r\\n  PIN_TASK: \'PIN_TASK\',\\r\\n ERROR: \'APP_ERROR\',\\r\\n};\\r\\n\\r\\nexport class ArchiveTask {\\r\\n  static readonly type = actions.ARCHIVE_TASK;\\r\\n\\r\\n  constructor(public payload: string) {}\\r\\n}\\r\\n\\r\\nexport class PinTask {\\r\\n  static readonly type = actions.PIN_TASK;\\r\\n\\r\\n  constructor(public payload: string) {}\\r\\n}\\r\\n // The class definition for our error field\\r\\n export class AppError {\\r\\n   static readonly type = actions.ERROR;\\r\\n   constructor(public payload: boolean) {}\\r\\n }\\r\\n\\r\\n// The initial state of our store when the app loads.\\r\\n// Usually you would fetch this from a server\\r\\nconst defaultTasks = [\\r\\n  { id: \'1\', title: \'Something\', state: \'TASK_INBOX\' },\\r\\n  { id: \'2\', title: \'Something more\', state: \'TASK_INBOX\' },\\r\\n  { id: \'3\', title: \'Something else\', state: \'TASK_INBOX\' },\\r\\n  { id: \'4\', title: \'Something again\', state: \'TASK_INBOX\' },\\r\\n];\\r\\n\\r\\nexport interface TaskStateModel {\\r\\n  tasks: Task[];\\r\\n  status: \'idle\' | \'loading\' | \'success\' | \'error\';\\r\\n  error: boolean;\\r\\n}\\r\\n\\r\\n// Sets the default state\\r\\n@State<TaskStateModel>({\\r\\n  name: \'taskbox\',\\r\\n  defaults: {\\r\\n    tasks: defaultTasks,\\r\\n    status: \'idle\',\\r\\n    error: false,\\r\\n  },\\r\\n})\\r\\n@Injectable()\\r\\nexport class TasksState {\\r\\n  // Defines a new selector for the error field\\r\\n  @Selector()\\r\\n  static getError(state: TaskStateModel): boolean {\\r\\n    return state.error;\\r\\n  }\\r\\n\\r\\n  @Selector()\\r\\n  static getAllTasks(state: TaskStateModel): Task[] {\\r\\n    return state.tasks;\\r\\n  }\\r\\n\\r\\n  // Triggers the PinTask action, similar to redux\\r\\n  @Action(PinTask)\\r\\n  pinTask(\\r\\n    { getState, setState }: StateContext<TaskStateModel>,\\r\\n    { payload }: PinTask\\r\\n  ) {\\r\\n    const task = getState().tasks.find((task) => task.id === payload);\\r\\n\\r\\n    if (task) {\\r\\n      const updatedTask: Task = {\\r\\n        ...task,\\r\\n        state: \'TASK_PINNED\',\\r\\n      };\\r\\n      setState(\\r\\n        patch({\\r\\n          tasks: updateItem<Task>(\\r\\n            (pinnedTask) => pinnedTask?.id === payload,\\r\\n            updatedTask\\r\\n          ),\\r\\n        })\\r\\n      );\\r\\n    }\\r\\n  }\\r\\n  // Triggers the archiveTask action, similar to redux\\r\\n  @Action(ArchiveTask)\\r\\n  archiveTask(\\r\\n    { getState, setState }: StateContext<TaskStateModel>,\\r\\n    { payload }: ArchiveTask\\r\\n  ) {\\r\\n    const task = getState().tasks.find((task) => task.id === payload);\\r\\n    if (task) {\\r\\n      const updatedTask: Task = {\\r\\n        ...task,\\r\\n        state: \'TASK_ARCHIVED\',\\r\\n      };\\r\\n      setState(\\r\\n        patch({\\r\\n          tasks: updateItem<Task>(\\r\\n            (archivedTask) => archivedTask?.id === payload,\\r\\n            updatedTask\\r\\n          ),\\r\\n        })\\r\\n      );\\r\\n    }\\r\\n  }\\r\\n // Function to handle how the state should be updated when the action is triggered\\r\\n @Action(AppError)\\r\\n setAppError(\\r\\n   { patchState, getState }: StateContext<TaskStateModel>,\\r\\n   { payload }: AppError\\r\\n ) {\\r\\n   const state = getState();\\r\\n   patchState({\\r\\n     error: !state.error,\\r\\n   });\\r\\n }\\r\\n}","properties":[{"name":"error","deprecated":false,"deprecationMessage":"","type":"boolean","optional":false,"description":"","line":43},{"name":"status","deprecated":false,"deprecationMessage":"","type":"\\"idle\\" | \\"loading\\" | \\"success\\" | \\"error\\"","optional":false,"description":"","line":42},{"name":"tasks","deprecated":false,"deprecationMessage":"","type":"Task[]","optional":false,"description":"","line":41}],"indexSignatures":[],"kind":165,"methods":[]},{"name":"User","id":"interface-User-9c7e5f1bbbab702cb032307d130876cb68969b0cd4eedef32a0c8cad8081a54e5f8f577ed6ad4539c1b99a1d246cb34031d198c2ea8eba440e64e91b14f01fdc","file":"src/stories/User.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"export interface User {}\\n","properties":[],"indexSignatures":[],"methods":[]}],"injectables":[{"name":"TasksState","id":"injectable-TasksState-a73d10c2547923b5d51d0b3b7612c6f3d8b95a8f827c9b295a8c310029233c04a951b3c99fb31146c9a5ba39408f7a1063837ee2ec685f3d45f5f998c0fbdcd1","file":"src/app/state/task.state.ts","properties":[],"methods":[{"name":"archiveTask","args":[{"type":"StateContext<TaskStateModel>","deprecated":false,"deprecationMessage":""},{"type":"ArchiveTask","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":93,"deprecated":false,"deprecationMessage":"","decorators":[{"name":"Action","stringifiedArguments":"ArchiveTask"}],"jsdoctags":[{"type":"StateContext<TaskStateModel>","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"type":"ArchiveTask","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"getAllTasks","args":[{"name":"state","type":"TaskStateModel","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"Task[]","typeParameters":[],"line":64,"deprecated":false,"deprecationMessage":"","decorators":[{"name":"Selector","stringifiedArguments":""}],"modifierKind":[124],"jsdoctags":[{"name":"state","type":"TaskStateModel","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"getError","args":[{"name":"state","type":"TaskStateModel","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"boolean","typeParameters":[],"line":59,"deprecated":false,"deprecationMessage":"","decorators":[{"name":"Selector","stringifiedArguments":""}],"modifierKind":[124],"jsdoctags":[{"name":"state","type":"TaskStateModel","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"pinTask","args":[{"type":"StateContext<TaskStateModel>","deprecated":false,"deprecationMessage":""},{"type":"PinTask","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":70,"deprecated":false,"deprecationMessage":"","decorators":[{"name":"Action","stringifiedArguments":"PinTask"}],"jsdoctags":[{"type":"StateContext<TaskStateModel>","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"type":"PinTask","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"setAppError","args":[{"type":"StateContext<TaskStateModel>","deprecated":false,"deprecationMessage":""},{"type":"AppError","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":115,"deprecated":false,"deprecationMessage":"","decorators":[{"name":"Action","stringifiedArguments":"AppError"}],"jsdoctags":[{"type":"StateContext<TaskStateModel>","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"type":"AppError","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}],"deprecated":false,"deprecationMessage":"","description":"","rawdescription":"\\n","sourceCode":"import { Injectable } from \'@angular/core\';\\r\\nimport { State, Selector, Action, StateContext } from \'@ngxs/store\';\\r\\nimport { patch, updateItem } from \'@ngxs/store/operators\';\\r\\nimport { Task } from \'../models/task.model\';\\r\\n\\r\\n// Defines the actions available to the app\\r\\nexport const actions = {\\r\\n  ARCHIVE_TASK: \'ARCHIVE_TASK\',\\r\\n  PIN_TASK: \'PIN_TASK\',\\r\\n ERROR: \'APP_ERROR\',\\r\\n};\\r\\n\\r\\nexport class ArchiveTask {\\r\\n  static readonly type = actions.ARCHIVE_TASK;\\r\\n\\r\\n  constructor(public payload: string) {}\\r\\n}\\r\\n\\r\\nexport class PinTask {\\r\\n  static readonly type = actions.PIN_TASK;\\r\\n\\r\\n  constructor(public payload: string) {}\\r\\n}\\r\\n // The class definition for our error field\\r\\n export class AppError {\\r\\n   static readonly type = actions.ERROR;\\r\\n   constructor(public payload: boolean) {}\\r\\n }\\r\\n\\r\\n// The initial state of our store when the app loads.\\r\\n// Usually you would fetch this from a server\\r\\nconst defaultTasks = [\\r\\n  { id: \'1\', title: \'Something\', state: \'TASK_INBOX\' },\\r\\n  { id: \'2\', title: \'Something more\', state: \'TASK_INBOX\' },\\r\\n  { id: \'3\', title: \'Something else\', state: \'TASK_INBOX\' },\\r\\n  { id: \'4\', title: \'Something again\', state: \'TASK_INBOX\' },\\r\\n];\\r\\n\\r\\nexport interface TaskStateModel {\\r\\n  tasks: Task[];\\r\\n  status: \'idle\' | \'loading\' | \'success\' | \'error\';\\r\\n  error: boolean;\\r\\n}\\r\\n\\r\\n// Sets the default state\\r\\n@State<TaskStateModel>({\\r\\n  name: \'taskbox\',\\r\\n  defaults: {\\r\\n    tasks: defaultTasks,\\r\\n    status: \'idle\',\\r\\n    error: false,\\r\\n  },\\r\\n})\\r\\n@Injectable()\\r\\nexport class TasksState {\\r\\n  // Defines a new selector for the error field\\r\\n  @Selector()\\r\\n  static getError(state: TaskStateModel): boolean {\\r\\n    return state.error;\\r\\n  }\\r\\n\\r\\n  @Selector()\\r\\n  static getAllTasks(state: TaskStateModel): Task[] {\\r\\n    return state.tasks;\\r\\n  }\\r\\n\\r\\n  // Triggers the PinTask action, similar to redux\\r\\n  @Action(PinTask)\\r\\n  pinTask(\\r\\n    { getState, setState }: StateContext<TaskStateModel>,\\r\\n    { payload }: PinTask\\r\\n  ) {\\r\\n    const task = getState().tasks.find((task) => task.id === payload);\\r\\n\\r\\n    if (task) {\\r\\n      const updatedTask: Task = {\\r\\n        ...task,\\r\\n        state: \'TASK_PINNED\',\\r\\n      };\\r\\n      setState(\\r\\n        patch({\\r\\n          tasks: updateItem<Task>(\\r\\n            (pinnedTask) => pinnedTask?.id === payload,\\r\\n            updatedTask\\r\\n          ),\\r\\n        })\\r\\n      );\\r\\n    }\\r\\n  }\\r\\n  // Triggers the archiveTask action, similar to redux\\r\\n  @Action(ArchiveTask)\\r\\n  archiveTask(\\r\\n    { getState, setState }: StateContext<TaskStateModel>,\\r\\n    { payload }: ArchiveTask\\r\\n  ) {\\r\\n    const task = getState().tasks.find((task) => task.id === payload);\\r\\n    if (task) {\\r\\n      const updatedTask: Task = {\\r\\n        ...task,\\r\\n        state: \'TASK_ARCHIVED\',\\r\\n      };\\r\\n      setState(\\r\\n        patch({\\r\\n          tasks: updateItem<Task>(\\r\\n            (archivedTask) => archivedTask?.id === payload,\\r\\n            updatedTask\\r\\n          ),\\r\\n        })\\r\\n      );\\r\\n    }\\r\\n  }\\r\\n // Function to handle how the state should be updated when the action is triggered\\r\\n @Action(AppError)\\r\\n setAppError(\\r\\n   { patchState, getState }: StateContext<TaskStateModel>,\\r\\n   { payload }: AppError\\r\\n ) {\\r\\n   const state = getState();\\r\\n   patchState({\\r\\n     error: !state.error,\\r\\n   });\\r\\n }\\r\\n}","type":"injectable"}],"guards":[],"interceptors":[],"classes":[{"name":"AppError","id":"class-AppError-a73d10c2547923b5d51d0b3b7612c6f3d8b95a8f827c9b295a8c310029233c04a951b3c99fb31146c9a5ba39408f7a1063837ee2ec685f3d45f5f998c0fbdcd1","file":"src/app/state/task.state.ts","deprecated":false,"deprecationMessage":"","type":"class","sourceCode":"import { Injectable } from \'@angular/core\';\\r\\nimport { State, Selector, Action, StateContext } from \'@ngxs/store\';\\r\\nimport { patch, updateItem } from \'@ngxs/store/operators\';\\r\\nimport { Task } from \'../models/task.model\';\\r\\n\\r\\n// Defines the actions available to the app\\r\\nexport const actions = {\\r\\n  ARCHIVE_TASK: \'ARCHIVE_TASK\',\\r\\n  PIN_TASK: \'PIN_TASK\',\\r\\n ERROR: \'APP_ERROR\',\\r\\n};\\r\\n\\r\\nexport class ArchiveTask {\\r\\n  static readonly type = actions.ARCHIVE_TASK;\\r\\n\\r\\n  constructor(public payload: string) {}\\r\\n}\\r\\n\\r\\nexport class PinTask {\\r\\n  static readonly type = actions.PIN_TASK;\\r\\n\\r\\n  constructor(public payload: string) {}\\r\\n}\\r\\n // The class definition for our error field\\r\\n export class AppError {\\r\\n   static readonly type = actions.ERROR;\\r\\n   constructor(public payload: boolean) {}\\r\\n }\\r\\n\\r\\n// The initial state of our store when the app loads.\\r\\n// Usually you would fetch this from a server\\r\\nconst defaultTasks = [\\r\\n  { id: \'1\', title: \'Something\', state: \'TASK_INBOX\' },\\r\\n  { id: \'2\', title: \'Something more\', state: \'TASK_INBOX\' },\\r\\n  { id: \'3\', title: \'Something else\', state: \'TASK_INBOX\' },\\r\\n  { id: \'4\', title: \'Something again\', state: \'TASK_INBOX\' },\\r\\n];\\r\\n\\r\\nexport interface TaskStateModel {\\r\\n  tasks: Task[];\\r\\n  status: \'idle\' | \'loading\' | \'success\' | \'error\';\\r\\n  error: boolean;\\r\\n}\\r\\n\\r\\n// Sets the default state\\r\\n@State<TaskStateModel>({\\r\\n  name: \'taskbox\',\\r\\n  defaults: {\\r\\n    tasks: defaultTasks,\\r\\n    status: \'idle\',\\r\\n    error: false,\\r\\n  },\\r\\n})\\r\\n@Injectable()\\r\\nexport class TasksState {\\r\\n  // Defines a new selector for the error field\\r\\n  @Selector()\\r\\n  static getError(state: TaskStateModel): boolean {\\r\\n    return state.error;\\r\\n  }\\r\\n\\r\\n  @Selector()\\r\\n  static getAllTasks(state: TaskStateModel): Task[] {\\r\\n    return state.tasks;\\r\\n  }\\r\\n\\r\\n  // Triggers the PinTask action, similar to redux\\r\\n  @Action(PinTask)\\r\\n  pinTask(\\r\\n    { getState, setState }: StateContext<TaskStateModel>,\\r\\n    { payload }: PinTask\\r\\n  ) {\\r\\n    const task = getState().tasks.find((task) => task.id === payload);\\r\\n\\r\\n    if (task) {\\r\\n      const updatedTask: Task = {\\r\\n        ...task,\\r\\n        state: \'TASK_PINNED\',\\r\\n      };\\r\\n      setState(\\r\\n        patch({\\r\\n          tasks: updateItem<Task>(\\r\\n            (pinnedTask) => pinnedTask?.id === payload,\\r\\n            updatedTask\\r\\n          ),\\r\\n        })\\r\\n      );\\r\\n    }\\r\\n  }\\r\\n  // Triggers the archiveTask action, similar to redux\\r\\n  @Action(ArchiveTask)\\r\\n  archiveTask(\\r\\n    { getState, setState }: StateContext<TaskStateModel>,\\r\\n    { payload }: ArchiveTask\\r\\n  ) {\\r\\n    const task = getState().tasks.find((task) => task.id === payload);\\r\\n    if (task) {\\r\\n      const updatedTask: Task = {\\r\\n        ...task,\\r\\n        state: \'TASK_ARCHIVED\',\\r\\n      };\\r\\n      setState(\\r\\n        patch({\\r\\n          tasks: updateItem<Task>(\\r\\n            (archivedTask) => archivedTask?.id === payload,\\r\\n            updatedTask\\r\\n          ),\\r\\n        })\\r\\n      );\\r\\n    }\\r\\n  }\\r\\n // Function to handle how the state should be updated when the action is triggered\\r\\n @Action(AppError)\\r\\n setAppError(\\r\\n   { patchState, getState }: StateContext<TaskStateModel>,\\r\\n   { payload }: AppError\\r\\n ) {\\r\\n   const state = getState();\\r\\n   patchState({\\r\\n     error: !state.error,\\r\\n   });\\r\\n }\\r\\n}","constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[{"name":"payload","type":"boolean","deprecated":false,"deprecationMessage":""}],"line":27,"jsdoctags":[{"name":"payload","type":"boolean","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},"properties":[{"name":"payload","deprecated":false,"deprecationMessage":"","type":"boolean","optional":false,"description":"","line":28,"modifierKind":[123]},{"name":"type","defaultValue":"actions.ERROR","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"","line":27,"modifierKind":[124,144]}],"methods":[],"indexSignatures":[],"inputsClass":[],"outputsClass":[],"hostBindings":[],"hostListeners":[]},{"name":"ArchiveTask","id":"class-ArchiveTask-a73d10c2547923b5d51d0b3b7612c6f3d8b95a8f827c9b295a8c310029233c04a951b3c99fb31146c9a5ba39408f7a1063837ee2ec685f3d45f5f998c0fbdcd1","file":"src/app/state/task.state.ts","deprecated":false,"deprecationMessage":"","type":"class","sourceCode":"import { Injectable } from \'@angular/core\';\\r\\nimport { State, Selector, Action, StateContext } from \'@ngxs/store\';\\r\\nimport { patch, updateItem } from \'@ngxs/store/operators\';\\r\\nimport { Task } from \'../models/task.model\';\\r\\n\\r\\n// Defines the actions available to the app\\r\\nexport const actions = {\\r\\n  ARCHIVE_TASK: \'ARCHIVE_TASK\',\\r\\n  PIN_TASK: \'PIN_TASK\',\\r\\n ERROR: \'APP_ERROR\',\\r\\n};\\r\\n\\r\\nexport class ArchiveTask {\\r\\n  static readonly type = actions.ARCHIVE_TASK;\\r\\n\\r\\n  constructor(public payload: string) {}\\r\\n}\\r\\n\\r\\nexport class PinTask {\\r\\n  static readonly type = actions.PIN_TASK;\\r\\n\\r\\n  constructor(public payload: string) {}\\r\\n}\\r\\n // The class definition for our error field\\r\\n export class AppError {\\r\\n   static readonly type = actions.ERROR;\\r\\n   constructor(public payload: boolean) {}\\r\\n }\\r\\n\\r\\n// The initial state of our store when the app loads.\\r\\n// Usually you would fetch this from a server\\r\\nconst defaultTasks = [\\r\\n  { id: \'1\', title: \'Something\', state: \'TASK_INBOX\' },\\r\\n  { id: \'2\', title: \'Something more\', state: \'TASK_INBOX\' },\\r\\n  { id: \'3\', title: \'Something else\', state: \'TASK_INBOX\' },\\r\\n  { id: \'4\', title: \'Something again\', state: \'TASK_INBOX\' },\\r\\n];\\r\\n\\r\\nexport interface TaskStateModel {\\r\\n  tasks: Task[];\\r\\n  status: \'idle\' | \'loading\' | \'success\' | \'error\';\\r\\n  error: boolean;\\r\\n}\\r\\n\\r\\n// Sets the default state\\r\\n@State<TaskStateModel>({\\r\\n  name: \'taskbox\',\\r\\n  defaults: {\\r\\n    tasks: defaultTasks,\\r\\n    status: \'idle\',\\r\\n    error: false,\\r\\n  },\\r\\n})\\r\\n@Injectable()\\r\\nexport class TasksState {\\r\\n  // Defines a new selector for the error field\\r\\n  @Selector()\\r\\n  static getError(state: TaskStateModel): boolean {\\r\\n    return state.error;\\r\\n  }\\r\\n\\r\\n  @Selector()\\r\\n  static getAllTasks(state: TaskStateModel): Task[] {\\r\\n    return state.tasks;\\r\\n  }\\r\\n\\r\\n  // Triggers the PinTask action, similar to redux\\r\\n  @Action(PinTask)\\r\\n  pinTask(\\r\\n    { getState, setState }: StateContext<TaskStateModel>,\\r\\n    { payload }: PinTask\\r\\n  ) {\\r\\n    const task = getState().tasks.find((task) => task.id === payload);\\r\\n\\r\\n    if (task) {\\r\\n      const updatedTask: Task = {\\r\\n        ...task,\\r\\n        state: \'TASK_PINNED\',\\r\\n      };\\r\\n      setState(\\r\\n        patch({\\r\\n          tasks: updateItem<Task>(\\r\\n            (pinnedTask) => pinnedTask?.id === payload,\\r\\n            updatedTask\\r\\n          ),\\r\\n        })\\r\\n      );\\r\\n    }\\r\\n  }\\r\\n  // Triggers the archiveTask action, similar to redux\\r\\n  @Action(ArchiveTask)\\r\\n  archiveTask(\\r\\n    { getState, setState }: StateContext<TaskStateModel>,\\r\\n    { payload }: ArchiveTask\\r\\n  ) {\\r\\n    const task = getState().tasks.find((task) => task.id === payload);\\r\\n    if (task) {\\r\\n      const updatedTask: Task = {\\r\\n        ...task,\\r\\n        state: \'TASK_ARCHIVED\',\\r\\n      };\\r\\n      setState(\\r\\n        patch({\\r\\n          tasks: updateItem<Task>(\\r\\n            (archivedTask) => archivedTask?.id === payload,\\r\\n            updatedTask\\r\\n          ),\\r\\n        })\\r\\n      );\\r\\n    }\\r\\n  }\\r\\n // Function to handle how the state should be updated when the action is triggered\\r\\n @Action(AppError)\\r\\n setAppError(\\r\\n   { patchState, getState }: StateContext<TaskStateModel>,\\r\\n   { payload }: AppError\\r\\n ) {\\r\\n   const state = getState();\\r\\n   patchState({\\r\\n     error: !state.error,\\r\\n   });\\r\\n }\\r\\n}","constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[{"name":"payload","type":"string","deprecated":false,"deprecationMessage":""}],"line":15,"jsdoctags":[{"name":"payload","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},"properties":[{"name":"payload","deprecated":false,"deprecationMessage":"","type":"string","optional":false,"description":"","line":17,"modifierKind":[123]},{"name":"type","defaultValue":"actions.ARCHIVE_TASK","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"","line":15,"modifierKind":[124,144]}],"methods":[],"indexSignatures":[],"inputsClass":[],"outputsClass":[],"hostBindings":[],"hostListeners":[]},{"name":"PinTask","id":"class-PinTask-a73d10c2547923b5d51d0b3b7612c6f3d8b95a8f827c9b295a8c310029233c04a951b3c99fb31146c9a5ba39408f7a1063837ee2ec685f3d45f5f998c0fbdcd1","file":"src/app/state/task.state.ts","deprecated":false,"deprecationMessage":"","type":"class","sourceCode":"import { Injectable } from \'@angular/core\';\\r\\nimport { State, Selector, Action, StateContext } from \'@ngxs/store\';\\r\\nimport { patch, updateItem } from \'@ngxs/store/operators\';\\r\\nimport { Task } from \'../models/task.model\';\\r\\n\\r\\n// Defines the actions available to the app\\r\\nexport const actions = {\\r\\n  ARCHIVE_TASK: \'ARCHIVE_TASK\',\\r\\n  PIN_TASK: \'PIN_TASK\',\\r\\n ERROR: \'APP_ERROR\',\\r\\n};\\r\\n\\r\\nexport class ArchiveTask {\\r\\n  static readonly type = actions.ARCHIVE_TASK;\\r\\n\\r\\n  constructor(public payload: string) {}\\r\\n}\\r\\n\\r\\nexport class PinTask {\\r\\n  static readonly type = actions.PIN_TASK;\\r\\n\\r\\n  constructor(public payload: string) {}\\r\\n}\\r\\n // The class definition for our error field\\r\\n export class AppError {\\r\\n   static readonly type = actions.ERROR;\\r\\n   constructor(public payload: boolean) {}\\r\\n }\\r\\n\\r\\n// The initial state of our store when the app loads.\\r\\n// Usually you would fetch this from a server\\r\\nconst defaultTasks = [\\r\\n  { id: \'1\', title: \'Something\', state: \'TASK_INBOX\' },\\r\\n  { id: \'2\', title: \'Something more\', state: \'TASK_INBOX\' },\\r\\n  { id: \'3\', title: \'Something else\', state: \'TASK_INBOX\' },\\r\\n  { id: \'4\', title: \'Something again\', state: \'TASK_INBOX\' },\\r\\n];\\r\\n\\r\\nexport interface TaskStateModel {\\r\\n  tasks: Task[];\\r\\n  status: \'idle\' | \'loading\' | \'success\' | \'error\';\\r\\n  error: boolean;\\r\\n}\\r\\n\\r\\n// Sets the default state\\r\\n@State<TaskStateModel>({\\r\\n  name: \'taskbox\',\\r\\n  defaults: {\\r\\n    tasks: defaultTasks,\\r\\n    status: \'idle\',\\r\\n    error: false,\\r\\n  },\\r\\n})\\r\\n@Injectable()\\r\\nexport class TasksState {\\r\\n  // Defines a new selector for the error field\\r\\n  @Selector()\\r\\n  static getError(state: TaskStateModel): boolean {\\r\\n    return state.error;\\r\\n  }\\r\\n\\r\\n  @Selector()\\r\\n  static getAllTasks(state: TaskStateModel): Task[] {\\r\\n    return state.tasks;\\r\\n  }\\r\\n\\r\\n  // Triggers the PinTask action, similar to redux\\r\\n  @Action(PinTask)\\r\\n  pinTask(\\r\\n    { getState, setState }: StateContext<TaskStateModel>,\\r\\n    { payload }: PinTask\\r\\n  ) {\\r\\n    const task = getState().tasks.find((task) => task.id === payload);\\r\\n\\r\\n    if (task) {\\r\\n      const updatedTask: Task = {\\r\\n        ...task,\\r\\n        state: \'TASK_PINNED\',\\r\\n      };\\r\\n      setState(\\r\\n        patch({\\r\\n          tasks: updateItem<Task>(\\r\\n            (pinnedTask) => pinnedTask?.id === payload,\\r\\n            updatedTask\\r\\n          ),\\r\\n        })\\r\\n      );\\r\\n    }\\r\\n  }\\r\\n  // Triggers the archiveTask action, similar to redux\\r\\n  @Action(ArchiveTask)\\r\\n  archiveTask(\\r\\n    { getState, setState }: StateContext<TaskStateModel>,\\r\\n    { payload }: ArchiveTask\\r\\n  ) {\\r\\n    const task = getState().tasks.find((task) => task.id === payload);\\r\\n    if (task) {\\r\\n      const updatedTask: Task = {\\r\\n        ...task,\\r\\n        state: \'TASK_ARCHIVED\',\\r\\n      };\\r\\n      setState(\\r\\n        patch({\\r\\n          tasks: updateItem<Task>(\\r\\n            (archivedTask) => archivedTask?.id === payload,\\r\\n            updatedTask\\r\\n          ),\\r\\n        })\\r\\n      );\\r\\n    }\\r\\n  }\\r\\n // Function to handle how the state should be updated when the action is triggered\\r\\n @Action(AppError)\\r\\n setAppError(\\r\\n   { patchState, getState }: StateContext<TaskStateModel>,\\r\\n   { payload }: AppError\\r\\n ) {\\r\\n   const state = getState();\\r\\n   patchState({\\r\\n     error: !state.error,\\r\\n   });\\r\\n }\\r\\n}","constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[{"name":"payload","type":"string","deprecated":false,"deprecationMessage":""}],"line":21,"jsdoctags":[{"name":"payload","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},"properties":[{"name":"payload","deprecated":false,"deprecationMessage":"","type":"string","optional":false,"description":"","line":23,"modifierKind":[123]},{"name":"type","defaultValue":"actions.PIN_TASK","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"","line":21,"modifierKind":[124,144]}],"methods":[],"indexSignatures":[],"inputsClass":[],"outputsClass":[],"hostBindings":[],"hostListeners":[]}],"directives":[],"components":[{"name":"AppComponent","id":"component-AppComponent-fd86484854e742bb98e08cf71dbb831b11f00e23ffc2fe242f05788d342de482a4d5be1df05edb0e9cfc76869448593d68ac6a4b6cbe34ebfa56359f2677e86a","file":"src/app/app.component.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"app-root","styleUrls":[],"styles":[],"template":"<app-inbox-screen></app-inbox-screen>","templateUrl":[],"viewProviders":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"title","defaultValue":"\'taskbox\'","deprecated":false,"deprecationMessage":"","type":"string","optional":false,"description":"","line":8}],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { Component } from \'@angular/core\';\\n\\n@Component({\\n  selector: \'app-root\',\\n  template: \'<app-inbox-screen></app-inbox-screen>\',\\n})\\nexport class AppComponent {\\n  title = \'taskbox\';\\n}\\n","assetsDirs":[],"styleUrlsData":"","stylesData":""},{"name":"ButtonComponent","id":"component-ButtonComponent-a53fd738b978780d39fb5fcc9ae4cfe0088e57a1f6ce674862d57dab9192140bd1c05548a9910db0469a431142886e658ff2e761f15781b2ad430e58d64724d0","file":"src/stories/button.component.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"storybook-button","styleUrls":["./button.css"],"styles":[],"template":"<button   type=\\"button\\"\\n   (click)=\\"onClick.emit($event)\\"\\n   [ngClass]=\\"classes\\"\\n   [ngStyle]=\\"{ \'background-color\': backgroundColor }\\"\\n >\\n   {{ label }}\\n </button>","templateUrl":[],"viewProviders":[],"inputsClass":[{"name":"backgroundColor","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nWhat background color to use\\n","description":"<p>What background color to use</p>\\n","line":28,"type":"string","decorators":[]},{"name":"label","defaultValue":"\'Button\'","deprecated":false,"deprecationMessage":"","jsdoctags":[{"pos":786,"end":799,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":325,"tagName":{"pos":787,"end":795,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"required"},"comment":""}],"rawdescription":"\\n\\nButton contents\\n\\n","description":"<p>Button contents</p>\\n","line":42,"type":"string","decorators":[]},{"name":"primary","defaultValue":"false","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nIs this the principal call to action on the page?\\n","description":"<p>Is this the principal call to action on the page?</p>\\n","line":22,"type":"boolean","decorators":[]},{"name":"size","defaultValue":"\'medium\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nHow large should the button be?\\n","description":"<p>How large should the button be?</p>\\n","line":34,"type":"\\"small\\" | \\"medium\\" | \\"large\\"","decorators":[]}],"outputsClass":[{"name":"onClick","defaultValue":"new EventEmitter<Event>()","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nOptional click handler\\n","description":"<p>Optional click handler</p>\\n","line":48,"type":"EventEmitter"}],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { CommonModule } from \'@angular/common\';\\nimport { Component, Input, Output, EventEmitter } from \'@angular/core\';\\n\\n@Component({\\n  selector: \'storybook-button\',\\n  imports: [CommonModule],\\n  template: ` <button\\n    type=\\"button\\"\\n    (click)=\\"onClick.emit($event)\\"\\n    [ngClass]=\\"classes\\"\\n    [ngStyle]=\\"{ \'background-color\': backgroundColor }\\"\\n  >\\n    {{ label }}\\n  </button>`,\\n  styleUrls: [\'./button.css\'],\\n})\\nexport default class ButtonComponent {\\n  /**\\n   * Is this the principal call to action on the page?\\n   */\\n  @Input()\\n  primary = false;\\n\\n  /**\\n   * What background color to use\\n   */\\n  @Input()\\n  backgroundColor?: string;\\n\\n  /**\\n   * How large should the button be?\\n   */\\n  @Input()\\n  size: \'small\' | \'medium\' | \'large\' = \'medium\';\\n\\n  /**\\n   * Button contents\\n   *\\n   * @required\\n   */\\n  @Input()\\n  label = \'Button\';\\n\\n  /**\\n   * Optional click handler\\n   */\\n  @Output()\\n  onClick = new EventEmitter<Event>();\\n\\n  public get classes(): string[] {\\n    const mode = this.primary ? \'storybook-button--primary\' : \'storybook-button--secondary\';\\n\\n    return [\'storybook-button\', `storybook-button--${this.size}`, mode];\\n  }\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":".storybook-button {\\n  font-family: \'Nunito Sans\', \'Helvetica Neue\', Helvetica, Arial, sans-serif;\\n  font-weight: 700;\\n  border: 0;\\n  border-radius: 3em;\\n  cursor: pointer;\\n  display: inline-block;\\n  line-height: 1;\\n}\\n.storybook-button--primary {\\n  color: white;\\n  background-color: #1ea7fd;\\n}\\n.storybook-button--secondary {\\n  color: #333;\\n  background-color: transparent;\\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\\n}\\n.storybook-button--small {\\n  font-size: 12px;\\n  padding: 10px 16px;\\n}\\n.storybook-button--medium {\\n  font-size: 14px;\\n  padding: 11px 20px;\\n}\\n.storybook-button--large {\\n  font-size: 16px;\\n  padding: 12px 24px;\\n}\\n","styleUrl":"./button.css"}],"stylesData":"","accessors":{"classes":{"name":"classes","getSignature":{"name":"classes","type":"[]","returnType":"string[]","line":50}}}},{"name":"HeaderComponent","id":"component-HeaderComponent-a71f246366d5d3dd2485d220bc2c384ceb3f056eb50faded8ff9e4a6404ca4a28c23117da4b98825de8da482bc2ba3b9abeab416745b32d1a89f68595d2dc939","file":"src/stories/header.component.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"storybook-header","styleUrls":["./header.css"],"styles":[],"template":"<header>    <div class=\\"wrapper\\">\\n      <div>\\n        <svg width=\\"32\\" height=\\"32\\" viewBox=\\"0 0 32 32\\" xmlns=\\"http://www.w3.org/2000/svg\\">\\n          <g fill=\\"none\\" fillRule=\\"evenodd\\">\\n            <path\\n              d=\\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\\"\\n              fill=\\"#FFF\\"\\n            />\\n            <path\\n              d=\\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\\"\\n              fill=\\"#555AB9\\"\\n            />\\n            <path\\n              d=\\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\\"\\n              fill=\\"#91BAF8\\"\\n            />\\n          </g>\\n        </svg>\\n        <h1>Acme</h1>\\n      </div>\\n      <div>\\n        <div *ngIf=\\"user\\">\\n          <span class=\\"welcome\\">\\n            Welcome, <b>{{ user.name }}</b\\n            >!\\n          </span>\\n          <storybook-button\\n            *ngIf=\\"user\\"\\n            size=\\"small\\"\\n            (onClick)=\\"onLogout.emit($event)\\"\\n            label=\\"Log out\\"\\n          ></storybook-button>\\n        </div>\\n        <div *ngIf=\\"!user\\">\\n          <storybook-button\\n            *ngIf=\\"!user\\"\\n            size=\\"small\\"\\n            class=\\"margin-left\\"\\n            (onClick)=\\"onLogin.emit($event)\\"\\n            label=\\"Log in\\"\\n          ></storybook-button>\\n          <storybook-button\\n            *ngIf=\\"!user\\"\\n            primary\\n            size=\\"small\\"\\n            primary=\\"true\\"\\n            class=\\"margin-left\\"\\n            (onClick)=\\"onCreateAccount.emit($event)\\"\\n            label=\\"Sign up\\"\\n          ></storybook-button>\\n        </div>\\n      </div>\\n    </div>\\n  </header>","templateUrl":[],"viewProviders":[],"inputsClass":[{"name":"user","defaultValue":"null","deprecated":false,"deprecationMessage":"","line":65,"type":"User | null","decorators":[]}],"outputsClass":[{"name":"onCreateAccount","defaultValue":"new EventEmitter<Event>()","deprecated":false,"deprecationMessage":"","line":74,"type":"EventEmitter"},{"name":"onLogin","defaultValue":"new EventEmitter<Event>()","deprecated":false,"deprecationMessage":"","line":68,"type":"EventEmitter"},{"name":"onLogout","defaultValue":"new EventEmitter<Event>()","deprecated":false,"deprecationMessage":"","line":71,"type":"EventEmitter"}],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { Component, Input, Output, EventEmitter } from \'@angular/core\';\\nimport type { User } from \'./User\';\\n\\n@Component({\\n  selector: \'storybook-header\',\\n  template: `<header>\\n    <div class=\\"wrapper\\">\\n      <div>\\n        <svg width=\\"32\\" height=\\"32\\" viewBox=\\"0 0 32 32\\" xmlns=\\"http://www.w3.org/2000/svg\\">\\n          <g fill=\\"none\\" fillRule=\\"evenodd\\">\\n            <path\\n              d=\\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\\"\\n              fill=\\"#FFF\\"\\n            />\\n            <path\\n              d=\\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\\"\\n              fill=\\"#555AB9\\"\\n            />\\n            <path\\n              d=\\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\\"\\n              fill=\\"#91BAF8\\"\\n            />\\n          </g>\\n        </svg>\\n        <h1>Acme</h1>\\n      </div>\\n      <div>\\n        <div *ngIf=\\"user\\">\\n          <span class=\\"welcome\\">\\n            Welcome, <b>{{ user.name }}</b\\n            >!\\n          </span>\\n          <storybook-button\\n            *ngIf=\\"user\\"\\n            size=\\"small\\"\\n            (onClick)=\\"onLogout.emit($event)\\"\\n            label=\\"Log out\\"\\n          ></storybook-button>\\n        </div>\\n        <div *ngIf=\\"!user\\">\\n          <storybook-button\\n            *ngIf=\\"!user\\"\\n            size=\\"small\\"\\n            class=\\"margin-left\\"\\n            (onClick)=\\"onLogin.emit($event)\\"\\n            label=\\"Log in\\"\\n          ></storybook-button>\\n          <storybook-button\\n            *ngIf=\\"!user\\"\\n            primary\\n            size=\\"small\\"\\n            primary=\\"true\\"\\n            class=\\"margin-left\\"\\n            (onClick)=\\"onCreateAccount.emit($event)\\"\\n            label=\\"Sign up\\"\\n          ></storybook-button>\\n        </div>\\n      </div>\\n    </div>\\n  </header>`,\\n  styleUrls: [\'./header.css\'],\\n})\\nexport default class HeaderComponent {\\n  @Input()\\n  user: User | null = null;\\n\\n  @Output()\\n  onLogin = new EventEmitter<Event>();\\n\\n  @Output()\\n  onLogout = new EventEmitter<Event>();\\n\\n  @Output()\\n  onCreateAccount = new EventEmitter<Event>();\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":".wrapper {\\n  font-family: \'Nunito Sans\', \'Helvetica Neue\', Helvetica, Arial, sans-serif;\\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\\n  padding: 15px 20px;\\n  display: flex;\\n  align-items: center;\\n  justify-content: space-between;\\n}\\n\\nsvg {\\n  display: inline-block;\\n  vertical-align: top;\\n}\\n\\nh1 {\\n  font-weight: 700;\\n  font-size: 20px;\\n  line-height: 1;\\n  margin: 6px 0 6px 10px;\\n  display: inline-block;\\n  vertical-align: top;\\n}\\n\\nbutton + button {\\n  margin-left: 10px;\\n}\\n\\n.welcome {\\n  color: #333;\\n  font-size: 14px;\\n  margin-right: 10px;\\n}\\n","styleUrl":"./header.css"}],"stylesData":""},{"name":"InboxScreenComponent","id":"component-InboxScreenComponent-994fd5c33d16f88ba47f530e0e0639a4390b98989104c57552eea4049e805e56cab3216cbf9735a670459fa3e76017a42f45e160a1686e1faf56c584c91e3b9a","file":"src/app/components/inbox-screen/inbox-screen.component.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"app-inbox-screen","styleUrls":[],"styles":[],"template":"<app-pure-inbox-screen [error]=\\"error$ | async\\"></app-pure-inbox-screen>\\n","templateUrl":[],"viewProviders":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"error$","deprecated":false,"deprecationMessage":"","type":"Observable<boolean>","optional":false,"description":"","line":13}],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { Component } from \'@angular/core\';\\r\\nimport { Store } from \'@ngxs/store\';\\r\\nimport { Observable } from \'rxjs\';\\r\\n\\r\\n@Component({\\r\\n  selector: \'app-inbox-screen\',\\r\\n  template: `\\r\\n    <app-pure-inbox-screen [error]=\\"error$ | async\\"></app-pure-inbox-screen>\\r\\n  `,\\r\\n})\\r\\nexport default class InboxScreenComponent {\\r\\n  error$: Observable<boolean>;\\r\\n  constructor(private store: Store) {\\r\\n    this.error$ = store.select((state) => state.taskbox.error);\\r\\n  }\\r\\n}","assetsDirs":[],"styleUrlsData":"","stylesData":"","constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[{"name":"store","type":"Store","deprecated":false,"deprecationMessage":""}],"line":13,"jsdoctags":[{"name":"store","type":"Store","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}},{"name":"PageComponent","id":"component-PageComponent-f5d2fd9ba0ee70c24f514ef21ebdae50beb2e2f42594802a96cdbeb02a59371897162b6be17fcb45cdc0d237d3e4bee611d1ad1d446a54e0699ba35b48991b87","file":"src/stories/page.component.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"storybook-page","styleUrls":["./page.css"],"styles":[],"template":"<article>    <storybook-header\\n      [user]=\\"user\\"\\n      (onLogout)=\\"doLogout()\\"\\n      (onLogin)=\\"doLogin()\\"\\n      (onCreateAccount)=\\"doCreateAccount()\\"\\n    ></storybook-header>\\n    <section>\\n      <h2>Pages in Storybook</h2>\\n      <p>\\n        We recommend building UIs with a\\n        <a href=\\"https://componentdriven.org\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">\\n          <strong>component-driven</strong>\\n        </a>\\n        process starting with atomic components and ending with pages.\\n      </p>\\n      <p>\\n        Render pages with mock data. This makes it easy to build and review page states without\\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\\n        in Storybook:\\n      </p>\\n      <ul>\\n        <li>\\n          Use a higher-level connected component. Storybook helps you compose such data from the\\n          \\"args\\" of child component stories\\n        </li>\\n        <li>\\n          Assemble data in the page component from your services. You can mock these services out\\n          using Storybook.\\n        </li>\\n      </ul>\\n      <p>\\n        Get a guided tutorial on component-driven development at\\n        <a href=\\"https://storybook.js.org/tutorials/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">\\n          Storybook tutorials\\n        </a>\\n        . Read more in the\\n        <a href=\\"https://storybook.js.org/docs\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"> docs </a>\\n        .\\n      </p>\\n      <div class=\\"tip-wrapper\\">\\n        <span class=\\"tip\\">Tip</span> Adjust the width of the canvas with the\\n        <svg width=\\"10\\" height=\\"10\\" viewBox=\\"0 0 12 12\\" xmlns=\\"http://www.w3.org/2000/svg\\">\\n          <g fill=\\"none\\" fillRule=\\"evenodd\\">\\n            <path\\n              d=\\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\\"\\n              id=\\"a\\"\\n              fill=\\"#999\\"\\n            />\\n          </g>\\n        </svg>\\n        Viewports addon in the toolbar\\n      </div>\\n    </section>\\n  </article>","templateUrl":[],"viewProviders":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"user","defaultValue":"null","deprecated":false,"deprecationMessage":"","type":"User | null","optional":false,"description":"","line":64}],"methodsClass":[{"name":"doCreateAccount","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":74,"deprecated":false,"deprecationMessage":""},{"name":"doLogin","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":70,"deprecated":false,"deprecationMessage":""},{"name":"doLogout","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":66,"deprecated":false,"deprecationMessage":""}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { Component } from \'@angular/core\';\\nimport type { User } from \'./User\';\\n\\n@Component({\\n  selector: \'storybook-page\',\\n  template: `<article>\\n    <storybook-header\\n      [user]=\\"user\\"\\n      (onLogout)=\\"doLogout()\\"\\n      (onLogin)=\\"doLogin()\\"\\n      (onCreateAccount)=\\"doCreateAccount()\\"\\n    ></storybook-header>\\n    <section>\\n      <h2>Pages in Storybook</h2>\\n      <p>\\n        We recommend building UIs with a\\n        <a href=\\"https://componentdriven.org\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">\\n          <strong>component-driven</strong>\\n        </a>\\n        process starting with atomic components and ending with pages.\\n      </p>\\n      <p>\\n        Render pages with mock data. This makes it easy to build and review page states without\\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\\n        in Storybook:\\n      </p>\\n      <ul>\\n        <li>\\n          Use a higher-level connected component. Storybook helps you compose such data from the\\n          \\"args\\" of child component stories\\n        </li>\\n        <li>\\n          Assemble data in the page component from your services. You can mock these services out\\n          using Storybook.\\n        </li>\\n      </ul>\\n      <p>\\n        Get a guided tutorial on component-driven development at\\n        <a href=\\"https://storybook.js.org/tutorials/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">\\n          Storybook tutorials\\n        </a>\\n        . Read more in the\\n        <a href=\\"https://storybook.js.org/docs\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"> docs </a>\\n        .\\n      </p>\\n      <div class=\\"tip-wrapper\\">\\n        <span class=\\"tip\\">Tip</span> Adjust the width of the canvas with the\\n        <svg width=\\"10\\" height=\\"10\\" viewBox=\\"0 0 12 12\\" xmlns=\\"http://www.w3.org/2000/svg\\">\\n          <g fill=\\"none\\" fillRule=\\"evenodd\\">\\n            <path\\n              d=\\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\\"\\n              id=\\"a\\"\\n              fill=\\"#999\\"\\n            />\\n          </g>\\n        </svg>\\n        Viewports addon in the toolbar\\n      </div>\\n    </section>\\n  </article>`,\\n  styleUrls: [\'./page.css\'],\\n})\\nexport default class PageComponent {\\n  user: User | null = null;\\n\\n  doLogout() {\\n    this.user = null;\\n  }\\n\\n  doLogin() {\\n    this.user = { name: \'Jane Doe\' };\\n  }\\n\\n  doCreateAccount() {\\n    this.user = { name: \'Jane Doe\' };\\n  }\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":"section {\\n  font-family: \'Nunito Sans\', \'Helvetica Neue\', Helvetica, Arial, sans-serif;\\n  font-size: 14px;\\n  line-height: 24px;\\n  padding: 48px 20px;\\n  margin: 0 auto;\\n  max-width: 600px;\\n  color: #333;\\n}\\n\\nsection h2 {\\n  font-weight: 700;\\n  font-size: 32px;\\n  line-height: 1;\\n  margin: 0 0 4px;\\n  display: inline-block;\\n  vertical-align: top;\\n}\\n\\nsection p {\\n  margin: 1em 0;\\n}\\n\\nsection a {\\n  text-decoration: none;\\n  color: #1ea7fd;\\n}\\n\\nsection ul {\\n  padding-left: 30px;\\n  margin: 1em 0;\\n}\\n\\nsection li {\\n  margin-bottom: 8px;\\n}\\n\\nsection .tip {\\n  display: inline-block;\\n  border-radius: 1em;\\n  font-size: 11px;\\n  line-height: 12px;\\n  font-weight: 700;\\n  background: #e7fdd8;\\n  color: #66bf3c;\\n  padding: 4px 12px;\\n  margin-right: 10px;\\n  vertical-align: top;\\n}\\n\\nsection .tip-wrapper {\\n  font-size: 13px;\\n  line-height: 20px;\\n  margin-top: 40px;\\n  margin-bottom: 40px;\\n}\\n\\nsection .tip-wrapper svg {\\n  display: inline-block;\\n  height: 12px;\\n  width: 12px;\\n  margin-right: 4px;\\n  vertical-align: top;\\n  margin-top: 3px;\\n}\\n\\nsection .tip-wrapper svg path {\\n  fill: #1ea7fd;\\n}\\n","styleUrl":"./page.css"}],"stylesData":""},{"name":"PureInboxScreenComponent","id":"component-PureInboxScreenComponent-cee918efeaf45f99ca4629f56f00dd3b7c8fc40ca815eee8b72a5e77002a592eb71f95ba880450d5e2ebcd5346336be7696cde78ed777cc603b191b9ede2dd86","file":"src/app/components/inbox-screen/pure-inbox-screen.component.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"app-pure-inbox-screen","styleUrls":[],"styles":[],"template":"<div *ngIf=\\"error\\" class=\\"page lists-show\\">\\n  <div class=\\"wrapper-message\\">\\n    <span class=\\"icon-face-sad\\"></span>\\n    <p class=\\"title-message\\">Oh no!</p>\\n    <p class=\\"subtitle-message\\">Something went wrong</p>\\n  </div>\\n</div>\\n\\n<div *ngIf=\\"!error\\" class=\\"page lists-show\\">\\n  <nav>\\n    <h1 class=\\"title-page\\">Taskbox</h1>\\n  </nav>\\n  <app-task-list></app-task-list>\\n</div>\\n","templateUrl":[],"viewProviders":[],"inputsClass":[{"name":"error","deprecated":false,"deprecationMessage":"","line":24,"type":"any","decorators":[]}],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { Component, Input } from \'@angular/core\';\\r\\n\\r\\n@Component({\\r\\n  selector: \'app-pure-inbox-screen\',\\r\\n  template: `\\r\\n    <div *ngIf=\\"error\\" class=\\"page lists-show\\">\\r\\n      <div class=\\"wrapper-message\\">\\r\\n        <span class=\\"icon-face-sad\\"></span>\\r\\n        <p class=\\"title-message\\">Oh no!</p>\\r\\n        <p class=\\"subtitle-message\\">Something went wrong</p>\\r\\n      </div>\\r\\n    </div>\\r\\n\\r\\n    <div *ngIf=\\"!error\\" class=\\"page lists-show\\">\\r\\n      <nav>\\r\\n        <h1 class=\\"title-page\\">Taskbox</h1>\\r\\n      </nav>\\r\\n      <app-task-list></app-task-list>\\r\\n    </div>\\r\\n  `,\\r\\n})\\r\\nexport default class PureInboxScreenComponent {\\r\\n  @Input() error: any;\\r\\n}","assetsDirs":[],"styleUrlsData":"","stylesData":""},{"name":"PureTaskListComponent","id":"component-PureTaskListComponent-866a109488b6cf0de6da389417ff1dfb8f01d0512d0a0172c7c23df066a7a0b75abbe9fc9d7dd6cd9820b3565623f72ba6b7a52a44c53ec3ff7cb7c849819b9e","file":"src/app/components/task-list/pure-task-list.component.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"app-pure-task-list","styleUrls":[],"styles":[],"template":"<div class=\\"list-items\\">\\n  <app-task\\n    *ngFor=\\"let task of tasksInOrder\\"\\n    [task]=\\"task\\"\\n    (onArchiveTask)=\\"onArchiveTask.emit($event)\\"\\n    (onPinTask)=\\"onPinTask.emit($event)\\"\\n  >\\n  </app-task>\\n  <div\\n    *ngIf=\\"tasksInOrder.length === 0 && !loading\\"\\n    class=\\"wrapper-message\\"\\n  >\\n    <span class=\\"icon-check\\"></span>\\n    <p class=\\"title-message\\">You have no tasks</p>\\n    <p class=\\"subtitle-message\\">Sit back and relax</p>\\n  </div>\\n  <div *ngIf=\\"loading\\">\\n    <div *ngFor=\\"let i of [1, 2, 3, 4, 5, 6]\\" class=\\"loading-item\\">\\n      <span class=\\"glow-checkbox\\"></span>\\n      <span class=\\"glow-text\\">\\n        <span>Loading</span> <span>cool</span> <span>state</span>\\n      </span>\\n    </div>\\n  </div>\\n</div>\\n","templateUrl":[],"viewProviders":[],"inputsClass":[{"name":"loading","defaultValue":"false","deprecated":false,"deprecationMessage":"","line":41,"type":"boolean","decorators":[]},{"name":"tasks","deprecated":false,"deprecationMessage":"","line":50,"type":"Task[]","decorators":[]}],"outputsClass":[{"name":"onArchiveTask","defaultValue":"new EventEmitter()","deprecated":false,"deprecationMessage":"","line":47,"type":"EventEmitter<any>"},{"name":"onPinTask","defaultValue":"new EventEmitter()","deprecated":false,"deprecationMessage":"","line":44,"type":"EventEmitter<any>"}],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { Component, Input, Output, EventEmitter } from \'@angular/core\';\\r\\nimport { Task } from \'../../models/task.model\';\\r\\n@Component({\\r\\n selector: \'app-pure-task-list\',\\r\\n  template: `\\r\\n    <div class=\\"list-items\\">\\r\\n      <app-task\\r\\n        *ngFor=\\"let task of tasksInOrder\\"\\r\\n        [task]=\\"task\\"\\r\\n        (onArchiveTask)=\\"onArchiveTask.emit($event)\\"\\r\\n        (onPinTask)=\\"onPinTask.emit($event)\\"\\r\\n      >\\r\\n      </app-task>\\r\\n      <div\\r\\n        *ngIf=\\"tasksInOrder.length === 0 && !loading\\"\\r\\n        class=\\"wrapper-message\\"\\r\\n      >\\r\\n        <span class=\\"icon-check\\"></span>\\r\\n        <p class=\\"title-message\\">You have no tasks</p>\\r\\n        <p class=\\"subtitle-message\\">Sit back and relax</p>\\r\\n      </div>\\r\\n      <div *ngIf=\\"loading\\">\\r\\n        <div *ngFor=\\"let i of [1, 2, 3, 4, 5, 6]\\" class=\\"loading-item\\">\\r\\n          <span class=\\"glow-checkbox\\"></span>\\r\\n          <span class=\\"glow-text\\">\\r\\n            <span>Loading</span> <span>cool</span> <span>state</span>\\r\\n          </span>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  `,\\r\\n})\\r\\n export default class PureTaskListComponent {\\r\\n    /**\\r\\n     * @ignore\\r\\n     * Component property to define ordering of tasks\\r\\n    */\\r\\n    tasksInOrder: Task[] = [];\\r\\n\\r\\n    @Input() loading = false;\\r\\n\\r\\n    // tslint:disable-next-line: no-output-on-prefix\\r\\n    @Output() onPinTask: EventEmitter<any> = new EventEmitter();\\r\\n\\r\\n    // tslint:disable-next-line: no-output-on-prefix\\r\\n    @Output() onArchiveTask: EventEmitter<any> = new EventEmitter();\\r\\n\\r\\n    @Input()\\r\\n    set tasks(arr: Task[]) {\\r\\n      const initialTasks = [\\r\\n        ...arr.filter((t) => t.state === \'TASK_PINNED\'),\\r\\n        ...arr.filter((t) => t.state !== \'TASK_PINNED\'),\\r\\n      ];\\r\\n      const filteredTasks = initialTasks.filter(\\r\\n        (t) => t.state === \'TASK_INBOX\' || t.state === \'TASK_PINNED\'\\r\\n      );\\r\\n      this.tasksInOrder = filteredTasks.filter(\\r\\n        (t) => t.state === \'TASK_INBOX\' || t.state === \'TASK_PINNED\'\\r\\n      );\\r\\n    }\\r\\n }","assetsDirs":[],"styleUrlsData":"","stylesData":"","accessors":{"tasks":{"name":"tasks","setSignature":{"name":"tasks","type":"void","deprecated":false,"deprecationMessage":"","args":[{"name":"arr","type":"Task[]","deprecated":false,"deprecationMessage":""}],"returnType":"void","line":50,"jsdoctags":[{"name":"arr","type":"Task[]","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}}}},{"name":"TaskComponent","id":"component-TaskComponent-cceb61d9b0f1ec56cf134c702776a231c788b984c0200f73176987538efdcce28239d3974cfc9162d78d567c9117d242d693ea9de546cb023be4a67b59990c28","file":"src/app/components/task/task.component.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"app-task","styleUrls":[],"styles":[],"template":"<div class=\\"list-item {{ task?.state }}\\">\\n  <label\\n    [attr.aria-label]=\\"\'archiveTask-\' + task?.id\\"\\n    for=\\"checked-{{ task?.id }}\\"\\n    class=\\"checkbox\\"\\n  >\\n    <input\\n      type=\\"checkbox\\"\\n      disabled=\\"true\\"\\n      [defaultChecked]=\\"task?.state === \'TASK_ARCHIVED\'\\"\\n      name=\\"checked-{{ task?.id }}\\"\\n      id=\\"checked-{{ task?.id }}\\"\\n    />\\n    <span class=\\"checkbox-custom\\" (click)=\\"onArchive(task?.id)\\"></span>\\n  </label>\\n  <label\\n    [attr.aria-label]=\\"task?.title + \'\'\\"\\n    for=\\"title-{{ task?.id }}\\"\\n    class=\\"title\\"\\n  >\\n    <input\\n      type=\\"text\\"\\n      [value]=\\"task?.title\\"\\n      readonly=\\"true\\"\\n      id=\\"title-{{ task?.id }}\\"\\n      name=\\"title-{{ task?.id }}\\"\\n      placeholder=\\"Input title\\"\\n    />\\n  </label>\\n  <button\\n    *ngIf=\\"task?.state !== \'TASK_ARCHIVED\'\\"\\n    class=\\"pin-button\\"\\n    [attr.aria-label]=\\"\'pinTask-\' + task?.id\\"\\n    (click)=\\"onPin(task?.id)\\"\\n  >\\n    <span class=\\"icon-star\\"></span>\\n  </button>\\n</div>\\n","templateUrl":[],"viewProviders":[],"inputsClass":[{"name":"task","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nThe shape of the task object\\n","description":"<p>The shape of the task object</p>\\n","line":52,"type":"Task","decorators":[]}],"outputsClass":[{"name":"onArchiveTask","defaultValue":"new EventEmitter<Event>()","deprecated":false,"deprecationMessage":"","line":60,"type":"EventEmitter"},{"name":"onPinTask","defaultValue":"new EventEmitter<Event>()","deprecated":false,"deprecationMessage":"","line":56,"type":"EventEmitter"}],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { Component, Input, Output, EventEmitter } from \'@angular/core\';\\r\\nimport { Task } from \'../../models/task.model\';\\r\\n\\r\\n@Component({\\r\\n  selector: \'app-task\',\\r\\n  template: `\\r\\n    <div class=\\"list-item {{ task?.state }}\\">\\r\\n      <label\\r\\n        [attr.aria-label]=\\"\'archiveTask-\' + task?.id\\"\\r\\n        for=\\"checked-{{ task?.id }}\\"\\r\\n        class=\\"checkbox\\"\\r\\n      >\\r\\n        <input\\r\\n          type=\\"checkbox\\"\\r\\n          disabled=\\"true\\"\\r\\n          [defaultChecked]=\\"task?.state === \'TASK_ARCHIVED\'\\"\\r\\n          name=\\"checked-{{ task?.id }}\\"\\r\\n          id=\\"checked-{{ task?.id }}\\"\\r\\n        />\\r\\n        <span class=\\"checkbox-custom\\" (click)=\\"onArchive(task?.id)\\"></span>\\r\\n      </label>\\r\\n      <label\\r\\n        [attr.aria-label]=\\"task?.title + \'\'\\"\\r\\n        for=\\"title-{{ task?.id }}\\"\\r\\n        class=\\"title\\"\\r\\n      >\\r\\n        <input\\r\\n          type=\\"text\\"\\r\\n          [value]=\\"task?.title\\"\\r\\n          readonly=\\"true\\"\\r\\n          id=\\"title-{{ task?.id }}\\"\\r\\n          name=\\"title-{{ task?.id }}\\"\\r\\n          placeholder=\\"Input title\\"\\r\\n        />\\r\\n      </label>\\r\\n      <button\\r\\n        *ngIf=\\"task?.state !== \'TASK_ARCHIVED\'\\"\\r\\n        class=\\"pin-button\\"\\r\\n        [attr.aria-label]=\\"\'pinTask-\' + task?.id\\"\\r\\n        (click)=\\"onPin(task?.id)\\"\\r\\n      >\\r\\n        <span class=\\"icon-star\\"></span>\\r\\n      </button>\\r\\n    </div>\\r\\n  `,\\r\\n})\\r\\nexport default class TaskComponent {\\r\\n  /**\\r\\n   * The shape of the task object\\r\\n  */\\r\\n  @Input() task?: Task;\\r\\n\\r\\n  // tslint:disable-next-line: no-output-on-prefix\\r\\n  @Output()\\r\\n  onPinTask = new EventEmitter<Event>();\\r\\n\\r\\n  // tslint:disable-next-line: no-output-on-prefix\\r\\n  @Output()\\r\\n  onArchiveTask = new EventEmitter<Event>();\\r\\n\\r\\n  /**\\r\\n   * @ignore\\r\\n   * Component method to trigger the onPin event\\r\\n   * @param id string\\r\\n   */\\r\\n  onPin(id: any) {\\r\\n    this.onPinTask.emit(id);\\r\\n  }\\r\\n  /**\\r\\n   * @ignore\\r\\n   * Component method to trigger the onArchive event\\r\\n   * @param id string\\r\\n   */\\r\\n  onArchive(id: any) {\\r\\n    this.onArchiveTask.emit(id);\\r\\n  }\\r\\n}","assetsDirs":[],"styleUrlsData":"","stylesData":""},{"name":"TaskListComponent","id":"component-TaskListComponent-58d662f053165428ceef14b74902201ef6b4b27ee38aea868f9967ea6d01e02231b5dfdd88f7d23870edfc8dea0c22453a33732f5dee89e34d7190723a8a88c1","file":"src/app/components/task-list/task-list.component.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"app-task-list","styleUrls":[],"styles":[],"template":"<app-pure-task-list\\n  [tasks]=\\"tasks$ | async\\"\\n  (onArchiveTask)=\\"archiveTask($event)\\"\\n  (onPinTask)=\\"pinTask($event)\\"\\n></app-pure-task-list>\\n","templateUrl":[],"viewProviders":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"tasks$","deprecated":false,"deprecationMessage":"","type":"Observable<any>","optional":true,"description":"","line":18}],"methodsClass":[{"name":"archiveTask","args":[{"name":"id","type":"string","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":27,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nComponent method to trigger the archiveTask event\\n","description":"<p>Component method to trigger the archiveTask event</p>\\n","jsdoctags":[{"name":"id","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"pinTask","args":[{"name":"id","type":"string","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":34,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nComponent method to trigger the pinTask event\\n","description":"<p>Component method to trigger the pinTask event</p>\\n","jsdoctags":[{"name":"id","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"description":"","rawdescription":"\\n","type":"component","sourceCode":"import { Component } from \'@angular/core\';\\r\\nimport { Store } from \'@ngxs/store\';\\r\\nimport { ArchiveTask, PinTask } from \'../../state/task.state\';\\r\\nimport { Observable } from \'rxjs\';\\r\\n\\r\\n@Component({\\r\\n  selector: \'app-task-list\',\\r\\n  template: `\\r\\n    <app-pure-task-list\\r\\n      [tasks]=\\"tasks$ | async\\"\\r\\n      (onArchiveTask)=\\"archiveTask($event)\\"\\r\\n      (onPinTask)=\\"pinTask($event)\\"\\r\\n    ></app-pure-task-list>\\r\\n  `,\\r\\n})\\r\\nexport default class TaskListComponent {\\r\\n  tasks$?: Observable<any>;\\r\\n\\r\\n  constructor(private store: Store) {\\r\\n     this.tasks$ = store.select((state) => state.taskbox.tasks);\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Component method to trigger the archiveTask event\\r\\n   */\\r\\n  archiveTask(id: string) {\\r\\n    this.store.dispatch(new ArchiveTask(id));\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * Component method to trigger the pinTask event\\r\\n   */\\r\\n  pinTask(id: string) {\\r\\n    this.store.dispatch(new PinTask(id));\\r\\n  }\\r\\n}","assetsDirs":[],"styleUrlsData":"","stylesData":"","constructorObj":{"name":"constructor","description":"","deprecated":false,"deprecationMessage":"","args":[{"name":"store","type":"Store","deprecated":false,"deprecationMessage":""}],"line":18,"jsdoctags":[{"name":"store","type":"Store","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}}],"modules":[{"name":"AppModule","id":"module-AppModule-045c28a3605381c0cf0d7e803599e1fc02d4bc35ce02edf67e344cc53a6175b8a29137185a512375dd47c4dfd160806a419d43ff94a57641939334aeb587fe03","description":"","deprecationMessage":"","deprecated":false,"file":"src/app/app.module.ts","methods":[],"sourceCode":"\\nimport { BrowserModule } from \'@angular/platform-browser\';\\nimport { NgModule } from \'@angular/core\';\\nimport { TaskModule } from \'./components/task/task.module\';\\nimport { NgxsModule } from \'@ngxs/store\';\\nimport { NgxsReduxDevtoolsPluginModule } from \'@ngxs/devtools-plugin\';\\nimport { NgxsLoggerPluginModule } from \'@ngxs/logger-plugin\';\\n\\nimport { environment } from \'../environments/environment\';\\nimport { AppComponent } from \'./app.component\';\\n\\n import InboxScreenComponent from \'./components/inbox-screen/inbox-screen.component\';\\n import PureInboxScreenComponent from \'./components/inbox-screen/pure-inbox-screen.component\';\\n\\n@NgModule({\\n declarations: [AppComponent, InboxScreenComponent, PureInboxScreenComponent],\\n  imports: [\\n    BrowserModule,\\n    TaskModule,\\n    NgxsModule.forRoot([], { developmentMode: !environment.production, }),\\n    NgxsReduxDevtoolsPluginModule.forRoot(),\\n    NgxsLoggerPluginModule.forRoot({ disabled: environment.production, }),\\n  ],\\n  providers: [],\\n  bootstrap: [AppComponent],\\n})\\nexport class AppModule {}","children":[{"type":"providers","elements":[]},{"type":"declarations","elements":[{"name":"AppComponent"},{"name":"InboxScreenComponent"},{"name":"PureInboxScreenComponent"}]},{"type":"imports","elements":[{"name":"TaskModule"}]},{"type":"exports","elements":[]},{"type":"bootstrap","elements":[{"name":"AppComponent"}]},{"type":"classes","elements":[]}]},{"name":"TaskModule","id":"module-TaskModule-6846ed2547a23b286119f5080cfe270dc932bfcf1f2d0f993d566db92d64ff4c2775a995f002d48a40e0b95f5df4e56eefe5be41ea99d7eea3a90d537c4f80ed","description":"","deprecationMessage":"","deprecated":false,"file":"src/app/components/task/task.module.ts","methods":[],"sourceCode":"\\r\\nimport { NgModule } from \'@angular/core\';\\r\\nimport { CommonModule } from \'@angular/common\';\\r\\nimport { NgxsModule } from \'@ngxs/store\';\\r\\n\\r\\nimport TaskComponent from \'./task.component\';\\r\\nimport TaskListComponent from \'../task-list/task-list.component\';\\r\\nimport { TasksState } from \'../../state/task.state\';\\r\\nimport PureTaskListComponent from \'../task-list/pure-task-list.component\';\\r\\n\\r\\n@NgModule({\\r\\n  imports: [CommonModule, NgxsModule.forFeature([TasksState])],\\r\\n  exports: [TaskComponent, TaskListComponent],\\r\\n  declarations: [TaskComponent, TaskListComponent, PureTaskListComponent],\\r\\n  providers: [],\\r\\n})\\r\\nexport class TaskModule {}","children":[{"type":"providers","elements":[]},{"type":"declarations","elements":[{"name":"PureTaskListComponent"},{"name":"TaskComponent"},{"name":"TaskListComponent"}]},{"type":"imports","elements":[]},{"type":"exports","elements":[{"name":"TaskComponent"},{"name":"TaskListComponent"}]},{"type":"bootstrap","elements":[]},{"type":"classes","elements":[]}]}],"miscellaneous":{"variables":[{"name":"actions","ctype":"miscellaneous","subtype":"variable","file":"src/app/state/task.state.ts","deprecated":false,"deprecationMessage":"","type":"object","defaultValue":"{\\r\\n  ARCHIVE_TASK: \'ARCHIVE_TASK\',\\r\\n  PIN_TASK: \'PIN_TASK\',\\r\\n ERROR: \'APP_ERROR\',\\r\\n}"},{"name":"actionsData","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/task/task.stories.ts","deprecated":false,"deprecationMessage":"","type":"object","defaultValue":"{\\r\\n  onPinTask: action(\'onPinTask\'),\\r\\n  onArchiveTask: action(\'onArchiveTask\'),\\r\\n}"},{"name":"Archived","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/task/task.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\r\\n  args: {\\r\\n    task: {\\r\\n      ...Default.args?.task,\\r\\n      state: \'TASK_ARCHIVED\',\\r\\n    },\\r\\n  },\\r\\n}"},{"name":"Default","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/task/task.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\r\\n  args: {\\r\\n    task: {\\r\\n      id: \'1\',\\r\\n      title: \'Test Task\',\\r\\n      state: \'TASK_INBOX\',\\r\\n    },\\r\\n  },\\r\\n}"},{"name":"Default","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/task-list/pure-task-list.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\r\\n  args: {\\r\\n    tasks: [\\r\\n      { ...TaskStories.Default.args?.task, id: \'1\', title: \'Task 1\' },\\r\\n      { ...TaskStories.Default.args?.task, id: \'2\', title: \'Task 2\' },\\r\\n      { ...TaskStories.Default.args?.task, id: \'3\', title: \'Task 3\' },\\r\\n      { ...TaskStories.Default.args?.task, id: \'4\', title: \'Task 4\' },\\r\\n      { ...TaskStories.Default.args?.task, id: \'5\', title: \'Task 5\' },\\r\\n      { ...TaskStories.Default.args?.task, id: \'6\', title: \'Task 6\' },\\r\\n    ],\\r\\n  },\\r\\n}"},{"name":"Default","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/inbox-screen/pure-inbox-screen.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{}"},{"name":"defaultTasks","ctype":"miscellaneous","subtype":"variable","file":"src/app/state/task.state.ts","deprecated":false,"deprecationMessage":"","type":"[]","defaultValue":"[\\r\\n  { id: \'1\', title: \'Something\', state: \'TASK_INBOX\' },\\r\\n  { id: \'2\', title: \'Something more\', state: \'TASK_INBOX\' },\\r\\n  { id: \'3\', title: \'Something else\', state: \'TASK_INBOX\' },\\r\\n  { id: \'4\', title: \'Something again\', state: \'TASK_INBOX\' },\\r\\n]"},{"name":"Empty","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/task-list/pure-task-list.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\r\\n  args: {\\r\\n    // Shaping the stories through args composition.\\r\\n    // Inherited data coming from the Loading story.\\r\\n    ...Loading.args,\\r\\n    loading: false,\\r\\n  },\\r\\n}"},{"name":"environment","ctype":"miscellaneous","subtype":"variable","file":"src/environments/environment.ts","deprecated":false,"deprecationMessage":"","type":"object","defaultValue":"{\\n  production: false,\\n}"},{"name":"environment","ctype":"miscellaneous","subtype":"variable","file":"src/environments/environment.prod.ts","deprecated":false,"deprecationMessage":"","type":"object","defaultValue":"{\\n  production: true,\\n}"},{"name":"Error","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/inbox-screen/pure-inbox-screen.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\r\\n  args: {\\r\\n    error: true,\\r\\n  },\\r\\n}"},{"name":"Large","ctype":"miscellaneous","subtype":"variable","file":"src/stories/Button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    size: \'large\',\\n    label: \'Button\',\\n  },\\n}"},{"name":"Loading","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/task-list/pure-task-list.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\r\\n  args: {\\r\\n    tasks: [],\\r\\n    loading: true,\\r\\n  },\\r\\n}"},{"name":"LoggedIn","ctype":"miscellaneous","subtype":"variable","file":"src/stories/Header.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    user: {\\n      name: \'Jane Doe\',\\n    },\\n  },\\n}"},{"name":"LoggedIn","ctype":"miscellaneous","subtype":"variable","file":"src/stories/Page.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: (args: Page) => ({\\n    props: args,\\n  }),\\n  play: async ({ canvasElement }) => {\\n    const canvas = within(canvasElement);\\n    const loginButton = await canvas.getByRole(\'button\', {\\n      name: /Log in/i,\\n    });\\n    await userEvent.click(loginButton);\\n  },\\n}"},{"name":"LoggedOut","ctype":"miscellaneous","subtype":"variable","file":"src/stories/Header.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{}"},{"name":"LoggedOut","ctype":"miscellaneous","subtype":"variable","file":"src/stories/Page.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: (args: Page) => ({\\n    props: args,\\n  }),\\n}"},{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"src/stories/Button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<Button>","defaultValue":"{\\n  title: \'Example/Button\',\\n  component: Button,\\n  tags: [\'autodocs\'],\\n  render: (args: Button) => ({\\n    props: {\\n      backgroundColor: null,\\n      ...args,\\n    },\\n  }),\\n  argTypes: {\\n    backgroundColor: {\\n      control: \'color\',\\n    },\\n  },\\n}"},{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"src/stories/Header.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<Header>","defaultValue":"{\\n  title: \'Example/Header\',\\n  component: Header,\\n  // This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/angular/writing-docs/autodocs\\n  tags: [\'autodocs\'],\\n  render: (args) => ({ props: args }),\\n  decorators: [\\n    moduleMetadata({\\n      declarations: [Button],\\n      imports: [CommonModule],\\n    }),\\n  ],\\n  parameters: {\\n    // More on how to position stories at: https://storybook.js.org/docs/angular/configure/story-layout\\n    layout: \'fullscreen\',\\n  },\\n}"},{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"src/stories/Page.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<Page>","defaultValue":"{\\n  title: \'Example/Page\',\\n  component: Page,\\n  parameters: {\\n    // More on how to position stories at: https://storybook.js.org/docs/angular/configure/story-layout\\n    layout: \'fullscreen\',\\n  },\\n  decorators: [\\n    moduleMetadata({\\n      declarations: [Button, Header],\\n      imports: [CommonModule],\\n    }),\\n  ],\\n}"},{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/task/task.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<TaskComponent>","defaultValue":"{\\r\\n  title: \'Task\',\\r\\n  component: TaskComponent,\\r\\n  excludeStories: /.*Data$/,\\r\\n  tags: [\'autodocs\'],\\r\\n  render: (args: TaskComponent) => ({\\r\\n    props: {\\r\\n      ...args,\\r\\n      onPinTask: actionsData.onPinTask,\\r\\n      onArchiveTask: actionsData.onArchiveTask,\\r\\n    },\\r\\n  }),\\r\\n}"},{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/task-list/pure-task-list.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<PureTaskListComponent>","defaultValue":"{\\r\\n  component: PureTaskListComponent,\\r\\n  title: \'PureTaskList\',\\r\\n  tags: [\'autodocs\'],\\r\\n  decorators: [\\r\\n    moduleMetadata({\\r\\n      //👇 Imports both components to allow component composition with Storybook\\r\\n      declarations: [PureTaskListComponent, TaskComponent],\\r\\n      imports: [CommonModule],\\r\\n    }),\\r\\n    //👇 Wraps our stories with a decorator\\r\\n    componentWrapperDecorator(\\r\\n      (story) => `<div style=\\"margin: 3em\\">${story}</div>`\\r\\n    ),\\r\\n  ],\\r\\n  render: (args: PureTaskListComponent) => ({\\r\\n    props: {\\r\\n      ...args,\\r\\n      onPinTask: TaskStories.actionsData.onPinTask,\\r\\n      onArchiveTask: TaskStories.actionsData.onArchiveTask,\\r\\n    },\\r\\n  }),\\r\\n}"},{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/inbox-screen/pure-inbox-screen.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<PureInboxScreenComponent>","defaultValue":"{\\r\\n  component: PureInboxScreenComponent,\\r\\n  title: \'PureInboxScreen\',\\r\\n  tags: [\'autodocs\'],\\r\\n  decorators: [\\r\\n    moduleMetadata({\\r\\n      imports: [CommonModule, TaskModule],\\r\\n    }),\\r\\n   applicationConfig({\\r\\n     providers: [Store, importProvidersFrom(NgxsModule.forRoot([TasksState]))],\\r\\n    }),\\r\\n  ],\\r\\n}"},{"name":"Pinned","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/task/task.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\r\\n  args: {\\r\\n    task: {\\r\\n      ...Default.args?.task,\\r\\n      state: \'TASK_PINNED\',\\r\\n    },\\r\\n  },\\r\\n}"},{"name":"preview","ctype":"miscellaneous","subtype":"variable","file":".storybook/preview.ts","deprecated":false,"deprecationMessage":"","type":"Preview","defaultValue":"{\\n  parameters: {\\n    actions: { argTypesRegex: \\"^on[A-Z].*\\" },\\n    controls: {\\n      matchers: {\\n        color: /(background|color)$/i,\\n        date: /Date$/,\\n      },\\n    },\\n  },\\n}"},{"name":"Primary","ctype":"miscellaneous","subtype":"variable","file":"src/stories/Button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    primary: true,\\n    label: \'Button\',\\n  },\\n}"},{"name":"Secondary","ctype":"miscellaneous","subtype":"variable","file":"src/stories/Button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    label: \'Button\',\\n  },\\n}"},{"name":"Small","ctype":"miscellaneous","subtype":"variable","file":"src/stories/Button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    size: \'small\',\\n    label: \'Button\',\\n  },\\n}"},{"name":"WithPinnedTasks","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/task-list/pure-task-list.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\r\\n  args: {\\r\\n    tasks: [\\r\\n      // Shaping the stories through args composition.\\r\\n      // Inherited data coming from the Default story.\\r\\n      ...(Default.args?.tasks?.slice(0, 5) || []),\\r\\n      { id: \'6\', title: \'Task 6 (pinned)\', state: \'TASK_PINNED\' },\\r\\n    ],\\r\\n  },\\r\\n}"}],"functions":[],"typealiases":[{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<Button>","file":"src/stories/Button.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":177},{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<Header>","file":"src/stories/Header.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":177},{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<Page>","file":"src/stories/Page.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":177},{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<TaskComponent>","file":"src/app/components/task/task.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":177},{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<PureTaskListComponent>","file":"src/app/components/task-list/pure-task-list.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":177},{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<PureInboxScreenComponent>","file":"src/app/components/inbox-screen/pure-inbox-screen.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":177}],"enumerations":[],"groupedVariables":{"src/app/state/task.state.ts":[{"name":"actions","ctype":"miscellaneous","subtype":"variable","file":"src/app/state/task.state.ts","deprecated":false,"deprecationMessage":"","type":"object","defaultValue":"{\\r\\n  ARCHIVE_TASK: \'ARCHIVE_TASK\',\\r\\n  PIN_TASK: \'PIN_TASK\',\\r\\n ERROR: \'APP_ERROR\',\\r\\n}"},{"name":"defaultTasks","ctype":"miscellaneous","subtype":"variable","file":"src/app/state/task.state.ts","deprecated":false,"deprecationMessage":"","type":"[]","defaultValue":"[\\r\\n  { id: \'1\', title: \'Something\', state: \'TASK_INBOX\' },\\r\\n  { id: \'2\', title: \'Something more\', state: \'TASK_INBOX\' },\\r\\n  { id: \'3\', title: \'Something else\', state: \'TASK_INBOX\' },\\r\\n  { id: \'4\', title: \'Something again\', state: \'TASK_INBOX\' },\\r\\n]"}],"src/app/components/task/task.stories.ts":[{"name":"actionsData","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/task/task.stories.ts","deprecated":false,"deprecationMessage":"","type":"object","defaultValue":"{\\r\\n  onPinTask: action(\'onPinTask\'),\\r\\n  onArchiveTask: action(\'onArchiveTask\'),\\r\\n}"},{"name":"Archived","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/task/task.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\r\\n  args: {\\r\\n    task: {\\r\\n      ...Default.args?.task,\\r\\n      state: \'TASK_ARCHIVED\',\\r\\n    },\\r\\n  },\\r\\n}"},{"name":"Default","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/task/task.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\r\\n  args: {\\r\\n    task: {\\r\\n      id: \'1\',\\r\\n      title: \'Test Task\',\\r\\n      state: \'TASK_INBOX\',\\r\\n    },\\r\\n  },\\r\\n}"},{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/task/task.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<TaskComponent>","defaultValue":"{\\r\\n  title: \'Task\',\\r\\n  component: TaskComponent,\\r\\n  excludeStories: /.*Data$/,\\r\\n  tags: [\'autodocs\'],\\r\\n  render: (args: TaskComponent) => ({\\r\\n    props: {\\r\\n      ...args,\\r\\n      onPinTask: actionsData.onPinTask,\\r\\n      onArchiveTask: actionsData.onArchiveTask,\\r\\n    },\\r\\n  }),\\r\\n}"},{"name":"Pinned","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/task/task.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\r\\n  args: {\\r\\n    task: {\\r\\n      ...Default.args?.task,\\r\\n      state: \'TASK_PINNED\',\\r\\n    },\\r\\n  },\\r\\n}"}],"src/app/components/task-list/pure-task-list.stories.ts":[{"name":"Default","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/task-list/pure-task-list.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\r\\n  args: {\\r\\n    tasks: [\\r\\n      { ...TaskStories.Default.args?.task, id: \'1\', title: \'Task 1\' },\\r\\n      { ...TaskStories.Default.args?.task, id: \'2\', title: \'Task 2\' },\\r\\n      { ...TaskStories.Default.args?.task, id: \'3\', title: \'Task 3\' },\\r\\n      { ...TaskStories.Default.args?.task, id: \'4\', title: \'Task 4\' },\\r\\n      { ...TaskStories.Default.args?.task, id: \'5\', title: \'Task 5\' },\\r\\n      { ...TaskStories.Default.args?.task, id: \'6\', title: \'Task 6\' },\\r\\n    ],\\r\\n  },\\r\\n}"},{"name":"Empty","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/task-list/pure-task-list.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\r\\n  args: {\\r\\n    // Shaping the stories through args composition.\\r\\n    // Inherited data coming from the Loading story.\\r\\n    ...Loading.args,\\r\\n    loading: false,\\r\\n  },\\r\\n}"},{"name":"Loading","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/task-list/pure-task-list.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\r\\n  args: {\\r\\n    tasks: [],\\r\\n    loading: true,\\r\\n  },\\r\\n}"},{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/task-list/pure-task-list.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<PureTaskListComponent>","defaultValue":"{\\r\\n  component: PureTaskListComponent,\\r\\n  title: \'PureTaskList\',\\r\\n  tags: [\'autodocs\'],\\r\\n  decorators: [\\r\\n    moduleMetadata({\\r\\n      //👇 Imports both components to allow component composition with Storybook\\r\\n      declarations: [PureTaskListComponent, TaskComponent],\\r\\n      imports: [CommonModule],\\r\\n    }),\\r\\n    //👇 Wraps our stories with a decorator\\r\\n    componentWrapperDecorator(\\r\\n      (story) => `<div style=\\"margin: 3em\\">${story}</div>`\\r\\n    ),\\r\\n  ],\\r\\n  render: (args: PureTaskListComponent) => ({\\r\\n    props: {\\r\\n      ...args,\\r\\n      onPinTask: TaskStories.actionsData.onPinTask,\\r\\n      onArchiveTask: TaskStories.actionsData.onArchiveTask,\\r\\n    },\\r\\n  }),\\r\\n}"},{"name":"WithPinnedTasks","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/task-list/pure-task-list.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\r\\n  args: {\\r\\n    tasks: [\\r\\n      // Shaping the stories through args composition.\\r\\n      // Inherited data coming from the Default story.\\r\\n      ...(Default.args?.tasks?.slice(0, 5) || []),\\r\\n      { id: \'6\', title: \'Task 6 (pinned)\', state: \'TASK_PINNED\' },\\r\\n    ],\\r\\n  },\\r\\n}"}],"src/app/components/inbox-screen/pure-inbox-screen.stories.ts":[{"name":"Default","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/inbox-screen/pure-inbox-screen.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{}"},{"name":"Error","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/inbox-screen/pure-inbox-screen.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\r\\n  args: {\\r\\n    error: true,\\r\\n  },\\r\\n}"},{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"src/app/components/inbox-screen/pure-inbox-screen.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<PureInboxScreenComponent>","defaultValue":"{\\r\\n  component: PureInboxScreenComponent,\\r\\n  title: \'PureInboxScreen\',\\r\\n  tags: [\'autodocs\'],\\r\\n  decorators: [\\r\\n    moduleMetadata({\\r\\n      imports: [CommonModule, TaskModule],\\r\\n    }),\\r\\n   applicationConfig({\\r\\n     providers: [Store, importProvidersFrom(NgxsModule.forRoot([TasksState]))],\\r\\n    }),\\r\\n  ],\\r\\n}"}],"src/environments/environment.ts":[{"name":"environment","ctype":"miscellaneous","subtype":"variable","file":"src/environments/environment.ts","deprecated":false,"deprecationMessage":"","type":"object","defaultValue":"{\\n  production: false,\\n}"}],"src/environments/environment.prod.ts":[{"name":"environment","ctype":"miscellaneous","subtype":"variable","file":"src/environments/environment.prod.ts","deprecated":false,"deprecationMessage":"","type":"object","defaultValue":"{\\n  production: true,\\n}"}],"src/stories/Button.stories.ts":[{"name":"Large","ctype":"miscellaneous","subtype":"variable","file":"src/stories/Button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    size: \'large\',\\n    label: \'Button\',\\n  },\\n}"},{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"src/stories/Button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<Button>","defaultValue":"{\\n  title: \'Example/Button\',\\n  component: Button,\\n  tags: [\'autodocs\'],\\n  render: (args: Button) => ({\\n    props: {\\n      backgroundColor: null,\\n      ...args,\\n    },\\n  }),\\n  argTypes: {\\n    backgroundColor: {\\n      control: \'color\',\\n    },\\n  },\\n}"},{"name":"Primary","ctype":"miscellaneous","subtype":"variable","file":"src/stories/Button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    primary: true,\\n    label: \'Button\',\\n  },\\n}"},{"name":"Secondary","ctype":"miscellaneous","subtype":"variable","file":"src/stories/Button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    label: \'Button\',\\n  },\\n}"},{"name":"Small","ctype":"miscellaneous","subtype":"variable","file":"src/stories/Button.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    size: \'small\',\\n    label: \'Button\',\\n  },\\n}"}],"src/stories/Header.stories.ts":[{"name":"LoggedIn","ctype":"miscellaneous","subtype":"variable","file":"src/stories/Header.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  args: {\\n    user: {\\n      name: \'Jane Doe\',\\n    },\\n  },\\n}"},{"name":"LoggedOut","ctype":"miscellaneous","subtype":"variable","file":"src/stories/Header.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{}"},{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"src/stories/Header.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<Header>","defaultValue":"{\\n  title: \'Example/Header\',\\n  component: Header,\\n  // This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/angular/writing-docs/autodocs\\n  tags: [\'autodocs\'],\\n  render: (args) => ({ props: args }),\\n  decorators: [\\n    moduleMetadata({\\n      declarations: [Button],\\n      imports: [CommonModule],\\n    }),\\n  ],\\n  parameters: {\\n    // More on how to position stories at: https://storybook.js.org/docs/angular/configure/story-layout\\n    layout: \'fullscreen\',\\n  },\\n}"}],"src/stories/Page.stories.ts":[{"name":"LoggedIn","ctype":"miscellaneous","subtype":"variable","file":"src/stories/Page.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: (args: Page) => ({\\n    props: args,\\n  }),\\n  play: async ({ canvasElement }) => {\\n    const canvas = within(canvasElement);\\n    const loginButton = await canvas.getByRole(\'button\', {\\n      name: /Log in/i,\\n    });\\n    await userEvent.click(loginButton);\\n  },\\n}"},{"name":"LoggedOut","ctype":"miscellaneous","subtype":"variable","file":"src/stories/Page.stories.ts","deprecated":false,"deprecationMessage":"","type":"Story","defaultValue":"{\\n  render: (args: Page) => ({\\n    props: args,\\n  }),\\n}"},{"name":"meta","ctype":"miscellaneous","subtype":"variable","file":"src/stories/Page.stories.ts","deprecated":false,"deprecationMessage":"","type":"Meta<Page>","defaultValue":"{\\n  title: \'Example/Page\',\\n  component: Page,\\n  parameters: {\\n    // More on how to position stories at: https://storybook.js.org/docs/angular/configure/story-layout\\n    layout: \'fullscreen\',\\n  },\\n  decorators: [\\n    moduleMetadata({\\n      declarations: [Button, Header],\\n      imports: [CommonModule],\\n    }),\\n  ],\\n}"}],".storybook/preview.ts":[{"name":"preview","ctype":"miscellaneous","subtype":"variable","file":".storybook/preview.ts","deprecated":false,"deprecationMessage":"","type":"Preview","defaultValue":"{\\n  parameters: {\\n    actions: { argTypesRegex: \\"^on[A-Z].*\\" },\\n    controls: {\\n      matchers: {\\n        color: /(background|color)$/i,\\n        date: /Date$/,\\n      },\\n    },\\n  },\\n}"}]},"groupedFunctions":{},"groupedEnumerations":{},"groupedTypeAliases":{"src/stories/Button.stories.ts":[{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<Button>","file":"src/stories/Button.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":177}],"src/stories/Header.stories.ts":[{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<Header>","file":"src/stories/Header.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":177}],"src/stories/Page.stories.ts":[{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<Page>","file":"src/stories/Page.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":177}],"src/app/components/task/task.stories.ts":[{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<TaskComponent>","file":"src/app/components/task/task.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":177}],"src/app/components/task-list/pure-task-list.stories.ts":[{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<PureTaskListComponent>","file":"src/app/components/task-list/pure-task-list.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":177}],"src/app/components/inbox-screen/pure-inbox-screen.stories.ts":[{"name":"Story","ctype":"miscellaneous","subtype":"typealias","rawtype":"StoryObj<PureInboxScreenComponent>","file":"src/app/components/inbox-screen/pure-inbox-screen.stories.ts","deprecated":false,"deprecationMessage":"","description":"","kind":177}]}},"routes":[],"coverage":{"count":3,"status":"low","files":[{"filePath":".storybook/preview.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"preview","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/app/app.component.ts","type":"component","linktype":"component","name":"AppComponent","coveragePercent":0,"coverageCount":"0/2","status":"low"},{"filePath":"src/app/components/inbox-screen/inbox-screen.component.ts","type":"component","linktype":"component","name":"InboxScreenComponent","coveragePercent":0,"coverageCount":"0/3","status":"low"},{"filePath":"src/app/components/inbox-screen/pure-inbox-screen.component.ts","type":"component","linktype":"component","name":"PureInboxScreenComponent","coveragePercent":0,"coverageCount":"0/2","status":"low"},{"filePath":"src/app/components/inbox-screen/pure-inbox-screen.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Default","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/app/components/inbox-screen/pure-inbox-screen.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Error","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/app/components/inbox-screen/pure-inbox-screen.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"meta","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/app/components/task-list/pure-task-list.component.ts","type":"component","linktype":"component","name":"PureTaskListComponent","coveragePercent":0,"coverageCount":"0/5","status":"low"},{"filePath":"src/app/components/task-list/pure-task-list.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Default","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/app/components/task-list/pure-task-list.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Empty","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/app/components/task-list/pure-task-list.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Loading","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/app/components/task-list/pure-task-list.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"meta","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/app/components/task-list/pure-task-list.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"WithPinnedTasks","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/app/components/task-list/task-list.component.ts","type":"component","linktype":"component","name":"TaskListComponent","coveragePercent":40,"coverageCount":"2/5","status":"medium"},{"filePath":"src/app/components/task/task.component.ts","type":"component","linktype":"component","name":"TaskComponent","coveragePercent":25,"coverageCount":"1/4","status":"low"},{"filePath":"src/app/components/task/task.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"actionsData","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/app/components/task/task.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Archived","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/app/components/task/task.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Default","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/app/components/task/task.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"meta","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/app/components/task/task.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Pinned","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/app/models/task.model.ts","type":"interface","linktype":"interface","name":"Task","coveragePercent":0,"coverageCount":"0/4","status":"low"},{"filePath":"src/app/state/task.state.ts","type":"class","linktype":"classe","name":"AppError","coveragePercent":0,"coverageCount":"0/4","status":"low"},{"filePath":"src/app/state/task.state.ts","type":"class","linktype":"classe","name":"ArchiveTask","coveragePercent":0,"coverageCount":"0/4","status":"low"},{"filePath":"src/app/state/task.state.ts","type":"class","linktype":"classe","name":"PinTask","coveragePercent":0,"coverageCount":"0/4","status":"low"},{"filePath":"src/app/state/task.state.ts","type":"injectable","linktype":"injectable","name":"TasksState","coveragePercent":0,"coverageCount":"0/6","status":"low"},{"filePath":"src/app/state/task.state.ts","type":"interface","linktype":"interface","name":"TaskStateModel","coveragePercent":0,"coverageCount":"0/4","status":"low"},{"filePath":"src/app/state/task.state.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"actions","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/app/state/task.state.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"defaultTasks","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/environments/environment.prod.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"environment","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/environments/environment.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"environment","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/stories/Button.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Large","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/stories/Button.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"meta","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/stories/Button.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Primary","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/stories/Button.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Secondary","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/stories/Button.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"Small","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/stories/Header.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"LoggedIn","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/stories/Header.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"LoggedOut","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/stories/Header.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"meta","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/stories/Page.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"LoggedIn","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/stories/Page.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"LoggedOut","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/stories/Page.stories.ts","type":"variable","linktype":"miscellaneous","linksubtype":"variable","name":"meta","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/stories/User.ts","type":"interface","linktype":"interface","name":"User","coveragePercent":0,"coverageCount":"0/1","status":"low"},{"filePath":"src/stories/button.component.ts","type":"component","linktype":"component","name":"ButtonComponent","coveragePercent":83,"coverageCount":"5/6","status":"very-good"},{"filePath":"src/stories/header.component.ts","type":"component","linktype":"component","name":"HeaderComponent","coveragePercent":0,"coverageCount":"0/5","status":"low"},{"filePath":"src/stories/page.component.ts","type":"component","linktype":"component","name":"PageComponent","coveragePercent":0,"coverageCount":"0/5","status":"low"}]}}');(0,angular.P)(documentation_namespaceObject);const _storybook_preview={parameters:{actions:{argTypesRegex:"^on[A-Z].*"},controls:{matchers:{color:/(background|color)$/i,date:/Date$/}}}}},"./storybook-config-entry.js":(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{"use strict";var dist=__webpack_require__("./node_modules/@storybook/global/dist/index.mjs"),external_STORYBOOK_MODULE_PREVIEW_API_=__webpack_require__("@storybook/preview-api");const external_STORYBOOK_MODULE_CHANNEL_POSTMESSAGE_namespaceObject=__STORYBOOK_MODULE_CHANNEL_POSTMESSAGE__,external_STORYBOOK_MODULE_CHANNEL_WEBSOCKET_namespaceObject=__STORYBOOK_MODULE_CHANNEL_WEBSOCKET__;var asyncToGenerator=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js");const pipeline=x=>x(),importers=[function(){var _ref=(0,asyncToGenerator.Z)((function*(path){if(!/^\.[\\/](?:src[\\/]app[\\/]components(?:[\\/](?!\.)(?:(?:(?!(?:^|[\\/])\.).)*?)[\\/]|[\\/]|$)(?!\.)(?=.)[^\\/]*?\.stories\.ts)$/.exec(path))return;const pathRemainder=path.substring(21);return __webpack_require__("./src/app/components lazy recursive ^\\.\\/.*$ include: (?:[\\\\/]src[\\\\/]app[\\\\/]components(?:[\\\\/](?%21\\.)(?:(?:(?%21(?:^%7C[\\\\/])\\.).)*?)[\\\\/]%7C[\\\\/]%7C$)(?%21\\.)(?=.)[^\\\\/]*?\\.stories\\.ts)$")("./"+pathRemainder)}));return function(_x){return _ref.apply(this,arguments)}}()];function _importFn(){return(_importFn=(0,asyncToGenerator.Z)((function*(path){for(let i=0;i<importers.length;i++){const moduleExports=yield pipeline((()=>importers[i](path)));if(moduleExports)return moduleExports}}))).apply(this,arguments)}const{SERVER_CHANNEL_URL}=dist.global,channel=(0,external_STORYBOOK_MODULE_CHANNEL_POSTMESSAGE_namespaceObject.createChannel)({page:"preview"});if(external_STORYBOOK_MODULE_PREVIEW_API_.addons.setChannel(channel),SERVER_CHANNEL_URL){const serverChannel=(0,external_STORYBOOK_MODULE_CHANNEL_WEBSOCKET_namespaceObject.createChannel)({url:SERVER_CHANNEL_URL});external_STORYBOOK_MODULE_PREVIEW_API_.addons.setServerChannel(serverChannel),window.__STORYBOOK_SERVER_CHANNEL__=serverChannel}const preview=new external_STORYBOOK_MODULE_PREVIEW_API_.PreviewWeb;window.__STORYBOOK_PREVIEW__=preview,window.__STORYBOOK_STORY_STORE__=preview.storyStore,window.__STORYBOOK_ADDONS_CHANNEL__=channel,window.__STORYBOOK_CLIENT_API__=new external_STORYBOOK_MODULE_PREVIEW_API_.ClientApi({storyStore:preview.storyStore}),preview.initialize({importFn:function importFn(_x2){return _importFn.apply(this,arguments)},getProjectAnnotations:()=>(0,external_STORYBOOK_MODULE_PREVIEW_API_.composeConfigs)([__webpack_require__("./node_modules/@storybook/angular/dist/client/docs/config.js"),__webpack_require__("./node_modules/@storybook/angular/dist/client/config.js"),__webpack_require__("./node_modules/@storybook/addon-links/dist/preview.mjs"),__webpack_require__("./node_modules/@storybook/addon-essentials/dist/docs/preview.mjs"),__webpack_require__("./node_modules/@storybook/addon-essentials/dist/actions/preview.mjs"),__webpack_require__("./node_modules/@storybook/addon-essentials/dist/backgrounds/preview.mjs"),__webpack_require__("./node_modules/@storybook/addon-essentials/dist/measure/preview.mjs"),__webpack_require__("./node_modules/@storybook/addon-essentials/dist/outline/preview.mjs"),__webpack_require__("./node_modules/@storybook/addon-essentials/dist/highlight/preview.mjs"),__webpack_require__("./node_modules/@storybook/addon-interactions/dist/preview.mjs"),__webpack_require__("./node_modules/@storybook/addon-a11y/dist/preview.mjs"),__webpack_require__("./.storybook/preview.ts")])})},"./node_modules/@storybook/addon-docs/dist sync recursive":module=>{function webpackEmptyContext(req){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}webpackEmptyContext.keys=()=>[],webpackEmptyContext.resolve=webpackEmptyContext,webpackEmptyContext.id="./node_modules/@storybook/addon-docs/dist sync recursive",module.exports=webpackEmptyContext},"./src/styles.css?ngGlobalStyle":()=>{},"./src/app/components lazy recursive ^\\.\\/.*$ include: (?:[\\\\/]src[\\\\/]app[\\\\/]components(?:[\\\\/](?%21\\.)(?:(?:(?%21(?:^%7C[\\\\/])\\.).)*?)[\\\\/]%7C[\\\\/]%7C$)(?%21\\.)(?=.)[^\\\\/]*?\\.stories\\.ts)$":(module,__unused_webpack_exports,__webpack_require__)=>{var map={"./inbox-screen/pure-inbox-screen.stories":["./src/app/components/inbox-screen/pure-inbox-screen.stories.ts",333,127],"./inbox-screen/pure-inbox-screen.stories.ts":["./src/app/components/inbox-screen/pure-inbox-screen.stories.ts",333,127],"./task-list/pure-task-list.stories":["./src/app/components/task-list/pure-task-list.stories.ts",274],"./task-list/pure-task-list.stories.ts":["./src/app/components/task-list/pure-task-list.stories.ts",274],"./task/task.stories":["./src/app/components/task/task.stories.ts",152],"./task/task.stories.ts":["./src/app/components/task/task.stories.ts",152]};function webpackAsyncContext(req){if(!__webpack_require__.o(map,req))return Promise.resolve().then((()=>{var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}));var ids=map[req],id=ids[0];return Promise.all(ids.slice(1).map(__webpack_require__.e)).then((()=>__webpack_require__(id)))}webpackAsyncContext.keys=()=>Object.keys(map),webpackAsyncContext.id="./src/app/components lazy recursive ^\\.\\/.*$ include: (?:[\\\\/]src[\\\\/]app[\\\\/]components(?:[\\\\/](?%21\\.)(?:(?:(?%21(?:^%7C[\\\\/])\\.).)*?)[\\\\/]%7C[\\\\/]%7C$)(?%21\\.)(?=.)[^\\\\/]*?\\.stories\\.ts)$",module.exports=webpackAsyncContext},"@storybook/channels":module=>{"use strict";module.exports=__STORYBOOK_MODULE_CHANNELS__},"@storybook/client-logger":module=>{"use strict";module.exports=__STORYBOOK_MODULE_CLIENT_LOGGER__},"@storybook/core-client":module=>{"use strict";module.exports=__STORYBOOK_MODULE_CORE_CLIENT__},"@storybook/core-events":module=>{"use strict";module.exports=__STORYBOOK_MODULE_CORE_EVENTS__},"@storybook/preview-api":module=>{"use strict";module.exports=__STORYBOOK_MODULE_PREVIEW_API__}},__webpack_require__=>{var __webpack_exec__=moduleId=>__webpack_require__(__webpack_require__.s=moduleId);__webpack_require__.O(0,[450],(()=>(__webpack_exec__("./storybook-config-entry.js"),__webpack_exec__("./node_modules/zone.js/fesm2015/zone.js"),__webpack_exec__("./src/styles.css?ngGlobalStyle"))));__webpack_require__.O()}]);